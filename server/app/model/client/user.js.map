{"version":3,"sources":["../../../../../server/app/model/client/user.js"],"names":[],"mappings":"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","file":"user.js","sourcesContent":["/**\n * User model.\n */\n\n'use strict';\n\nimport Factory from './../factory';\n\nclass User {\n\n    constructor(hub, socket, nick, id) {\n        // Model\n        this._hub = hub;\n        this._userConnection = Factory.createUserConnection(this, socket);\n        this._nick = nick;\n        this._id = id;\n\n        // States\n        this._ingame = false;\n        this._player = null;\n    }\n\n    // Model\n    get hub() { return this._hub; }\n    get id() { return this._id; }\n    get connection() { return this._userConnection; }\n\n    get nick() { return this._nick; }\n    set nick(nick) { this._nick = nick; }\n    get ingame() { return this._ingame; }\n    set ingame(value) { if (value) this._ingame = value; }\n\n    // Send a message to this user through its UserConnection.\n    send(kind, data) {\n        this._userConnection.send(kind, data);\n    }\n\n    // Requests the hub to create a new gaming pool.\n    requestNewGame(data) {\n        return this._hub.requestNewGame(this, data);\n    }\n\n    // Join a specific game.\n    join(kind, gameId) {\n        gameId = parseInt(gameId);\n\n        this._ingame = true;\n        var game = this._hub.getGame(kind, gameId);\n        if (!game) return false;\n\n        // Stop listening for general game management events...\n        // Prevents the user from joining multiple games.\n        this._userConnection.idle();\n\n        // Create a player associated to this game and spawn it\n        var player = Factory.createPlayer(this, game);\n        this._player = player;\n        game.addPlayer(player);\n        return true;\n    }\n\n    fetchHubState() {\n        let games = this._hub.listGames();\n        if (Object.keys(games).length < 1) {\n            this._userConnection.send('hub', JSON.stringify(games));\n            return;\n        }\n\n        for (let kind in games) {\n            if (games[kind] instanceof Array && games[kind].length > 0) {\n                this._userConnection.send('hub', JSON.stringify(games));\n                return;\n            }\n        }\n\n    }\n\n    // Leave all games (current game). Stay idle.\n    leave() {\n        this._ingame = false;\n        if (this._player) {\n            this._player.leave();\n            this._player.destroy(); // OK given player.leave() was called\n            // So player does not belong to its game model.\n            this._player = null;\n        }\n        this._userConnection.listen();\n    }\n\n    // Disconnect from ingame socket. Stay inside game model.\n    // Maybe the connection will come back.\n    disconnect() {\n        // Do not destroy player (account for unexpected disconnections)\n        if (this._player) this._player.disconnect();\n    }\n\n    // Clean references.\n    destroy() {\n        this._userConnection.destroy();\n        // Do not destroy player before its game ends.\n        // Useful for user reconnection...\n        // if (this._player) this._player.destroy();\n\n        delete this._userConnection;\n        delete this._player;\n        delete this._hub;\n        delete this._nick;\n        delete this._id;\n        delete this._ingame;\n    }\n\n}\n\nexport default User;\n"]}