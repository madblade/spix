{"version":3,"sources":["../../../../../server/app/model/client/player.js"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;;;AAEA;;;;;;IAEM;AAEF,aAFE,MAEF,CAAY,IAAZ,EAAkB,IAAlB,EAAwB;4CAFtB,QAEsB;;AACpB,aAAK,KAAL,GAAa,IAAb,CADoB;AAEpB,aAAK,KAAL,GAAa,IAAb;;AAFoB,YAIpB,CAAK,OAAL,GAAe,SAAf,CAJoB;AAKpB,aAAK,iBAAL,GAAyB,kBAAQ,sBAAR,CAA+B,KAAK,UAAL,CAAgB,MAAhB,CAAxD,CALoB;KAAxB;;;;;+BAFE;;;;;;;;6BAkBG,MAAM;AACP,iBAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,EADO;;;;;;;;;;;6BASN,MAAM,MAAM;AACb,iBAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,EAAkC,IAAlC,EADa;;;;;;;gCAKT;AACJ,iBAAK,UAAL,GADI;AAEJ,iBAAK,KAAL,CAAW,YAAX,CAAwB,IAAxB,EAFI;;;;;;;qCAMK;AACT,iBAAK,iBAAL,CAAuB,KAAvB,GADS;;;;;;;;;;;2BASV,SAAS,WAAW;AACnB,iBAAK,iBAAL,CAAuB,EAAvB,CAA0B,OAA1B,EAAmC,SAAnC,EADmB;;;;;;;;;;;4BASnB,SAAS,WAAW;AACpB,iBAAK,iBAAL,CAAuB,GAAvB,CAA2B,OAA3B,EAAoC,SAApC,EADoB;;;;;;;kCAKd;;AAEN,gBAAI,KAAK,iBAAL,EAAwB,KAAK,iBAAL,CAAuB,OAAvB,GAA5B;AACA,mBAAO,KAAK,iBAAL,CAHD;AAIN,mBAAO,KAAK,KAAL,CAJD;AAKN,mBAAO,KAAK,KAAL,CALD;;;;4BAlDC;AAAE,mBAAO,KAAK,KAAL,CAAT;;;;4BACA;AAAE,mBAAO,KAAK,KAAL,CAAT;;;WAZT;;;kBAuES","file":"player.js","sourcesContent":["/**\n * Player model.\n */\n\n'use strict';\n\nimport Factory from './../factory';\n\nclass Player {\n\n    constructor(user, game) {\n        this._user = user;\n        this._game = game;\n        // May be given an avatar when logged to a game.\n        this._avatar = undefined;\n        this._playerConnection = Factory.createPlayerConnection(user.connection.socket);\n    }\n\n    // Model\n    get game() { return this._game; }\n    get user() { return this._user; }\n\n    /**\n     * Join a socket room.\n     * @param room Socket subset of users.\n     */\n    join(room) {\n        this._playerConnection.join(room);\n    }\n\n    /**\n     * Send a message to this user.\n     * @param kind\n     * @param data\n     */\n    send(kind, data) {\n        this._playerConnection.send(kind, data);\n    }\n\n    // Leave game and make the game forget.\n    leave() {\n        this.disconnect();\n        this._game.removePlayer(this);\n    }\n\n    // Close player connection.\n    disconnect() {\n        this._playerConnection.close();\n    }\n\n    /**\n     * Define custom interactions (see PlayerConnection).\n     * @param message\n     * @param behaviour\n     */\n    on(message, behaviour) {\n        this._playerConnection.on(message, behaviour);\n    }\n\n    /**\n     * Stop listening for a specified input type.\n     * @param message\n     * @param behaviour\n     */\n    off(message, behaviour) {\n        this._playerConnection.off(message, behaviour);\n    }\n\n    // Clean references. Only use from a Game instance.\n    destroy() {\n        // Destroy player connection which is a single child of this object.\n        if (this._playerConnection) this._playerConnection.destroy();\n        delete this._playerConnection;\n        delete this._game;\n        delete this._user;\n    }\n\n}\n\nexport default Player;\n"]}