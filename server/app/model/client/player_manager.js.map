{"version":3,"sources":["../../../../../server/app/model/client/player_manager.js"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;;;AAEA;;;;;;;;;;;IAMM;AAEF,aAFE,aAEF,GAAc;4CAFZ,eAEY;;AACV,aAAK,QAAL,GAAgB,EAAhB,CADU;AAEV,aAAK,gBAAL,GAAwB,IAAxB,CAFU;AAGV,aAAK,mBAAL,GAA2B,IAA3B,CAHU;KAAd;;+BAFE;;kCAUQ,QAAQ;AACd,iBAAK,QAAL,CAAc,IAAd,CAAmB,MAAnB,EADc;AAEd,gBAAI,KAAK,gBAAL,EAAuB,KAAK,gBAAL,CAAsB,MAAtB,EAA3B;;;;wCAGY,UAAU;AACtB,gBAAI,UAAU,KAAK,QAAL,CADQ;AAEtB,iBAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,QAAQ,MAAR,EAAgB,IAAI,CAAJ,EAAO,EAAE,CAAF,EAAK;AAC5C,oBAAI,SAAS,QAAQ,CAAR,CAAT,CADwC;AAE5C,oBAAI,OAAO,MAAP,IAAiB,OAAO,MAAP,CAAc,EAAd,KAAqB,QAArB,EAA+B,OAAO,MAAP,CAApD;aAFJ;AAIA,mBAAO,KAAP,CANsB;;;;qCASb,QAAQ;AACjB,kCAAgB,eAAhB,CAAgC,KAAK,QAAL,EAAe,MAA/C,EADiB;AAEjB,gBAAI,KAAK,mBAAL,EAA0B,KAAK,mBAAL,CAAyB,MAAzB,EAA9B;AACA,mBAAO,MAAP,CAAc,GAAd,GAHiB;AAIjB,mBAAO,OAAO,MAAP,CAJU;AAKjB,mBAAO,OAAP;AALiB;;;2CAQF;;;AACf,gBAAI,KAAK,mBAAL,EAA0B,KAAK,QAAL,CAAc,OAAd,CAAsB;uBAAK,MAAK,mBAAL,CAAyB,CAAzB;aAAL,CAAtB,CAA9B;AACA,iBAAK,QAAL,CAAc,OAAd,CAAsB;uBAAK,EAAE,OAAF;aAAL,CAAtB;AAFe,gBAGf,CAAK,QAAL,GAAgB,EAAhB,CAHe;;;;8CAMG,GAAG;AACrB,iBAAK,gBAAL,GAAwB,CAAxB,CADqB;;;;iDAIA,GAAG;AACxB,iBAAK,mBAAL,GAA2B,CAA3B,CADwB;;;;;;;gCAKpB,UAAU;AACd,mBAAO,KAAK,QAAL,CAAc,OAAd,CAAsB;uBAAK,SAAS,CAAT;aAAL,CAA7B,CADc;;;;;;;kCAKR;AACN,iBAAK,gBAAL,GADM;AAEN,mBAAO,KAAK,QAAL,CAFD;AAGN,mBAAO,KAAK,gBAAL,CAHD;AAIN,mBAAO,KAAK,mBAAL,CAJD;;;;4BA5CM;AAAE,mBAAO,KAAK,QAAL,CAAc,MAAd,CAAT;;;WARd;;;kBA6DS","file":"player_manager.js","sourcesContent":["/**\n * Utility class encapsulating player management.\n */\n\n'use strict';\n\nimport CollectionUtils from '../../engine/math/collections';\n\n/**\n * Note: every time a user joins a given game, it is given a new Player instance.\n * So all Player instances which belong to a game must be cleaned at the moment this game is cleaned.\n */\nclass PlayerManager {\n\n    constructor() {\n        this._players = [];\n        this._handleAddPlayer = null;\n        this._handleRemovePlayer = null;\n    }\n\n    get nbPlayers() { return this._players.length; }\n\n    addPlayer(player) {\n        this._players.push(player);\n        if (this._handleAddPlayer) this._handleAddPlayer(player);\n    }\n\n    getPlayerFromId(playerId) {\n        let players = this._players;\n        for (let p = 0, l = players.length; p < l; ++p) {\n            let player = players[p];\n            if (player.avatar && player.avatar.id === playerId) return player;\n        }\n        return false;\n    }\n\n    removePlayer(player) {\n        CollectionUtils.removeFromArray(this._players, player);\n        if (this._handleRemovePlayer) this._handleRemovePlayer(player);\n        player.avatar.die();\n        delete player.avatar;\n        player.destroy(); // Clean references from player\n    }\n\n    removeAllPlayers() {\n        if (this._handleRemovePlayer) this._players.forEach(p => this._handleRemovePlayer(p));\n        this._players.forEach(p => p.destroy()); // Clean references from all players\n        this._players = [];\n    }\n\n    setAddPlayerBehaviour(f) {\n        this._handleAddPlayer = f;\n    }\n\n    setRemovePlayerBehaviour(f) {\n        this._handleRemovePlayer = f;\n    }\n\n    // Iterator on players.\n    forEach(callback) {\n        return this._players.forEach(p => callback(p));\n    }\n\n    // Clean all references.\n    destroy() {\n        this.removeAllPlayers();\n        delete this._players;\n        delete this._handleAddPlayer;\n        delete this._handleRemovePlayer;\n    }\n\n}\n\nexport default PlayerManager;\n"]}