{"version":3,"sources":["../../../../../server/app/model/connection/connection.js"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;;;;;;;AAEA;;;;;;IAEM;AAEF,aAFE,SAEF,CAAY,GAAZ,EAAiB;4CAFf,WAEe;;AACb,aAAK,IAAL,GAAY,GAAZ,CADa;AAEb,aAAK,OAAL,GAAe,kBAAQ,YAAR,CAAqB,IAArB,CAAf,CAFa;AAGb,aAAK,GAAL,GAAW,IAAX,CAHa;AAIb,aAAK,MAAL,GAAc,KAAd,CAJa;KAAjB;;;;;+BAFE;;;;;kCAeQ,QAAQ;;AAEd,gBAAI,OAAO,KAAK,OAAL,CAAa,YAAb,CAA0B,MAA1B,CAAP;;;AAFU,kBAKd,CAAO,IAAP,GAAc,IAAd;;;;AALc,sBASd,CAAW;uBAAK,OAAO,IAAP,CAAY,WAAZ,EAAyB,EAAzB;aAAL,EAAmC,GAA9C,EATc;;;;wCAYF,QAAQ;;;;AAEpB,mBAAO,GAAP,GAAa,OAAO,cAAP;;;AAFO,kBAKpB,CAAO,EAAP,CAAU,YAAV,EAAwB,aAAK;AACzB,oBAAI,OAAO,OAAO,IAAP,CADc;AAEzB,oBAAI,SAAS,SAAT,EAAoB,OAAxB;;;AAFyB,oBAKzB,CAAK,KAAL;;;AALyB,qBAQzB,CAAK,OAAL,CAAa,UAAb,CAAwB,IAAxB,EARyB;;AAUzB,oBAAI,MAAK,MAAL,EAAa,OAAO,GAAP,CAAW,cAAX,EAAjB;aAVoB,CAAxB,CALoB;;;;mCAmBb,QAAQ;AACf,iBAAK,MAAL,GAAc,IAAd,CADe;;AAGf,mBAAO,OAAP,GAAiB,OAAO,OAAP,CAAe,UAAf,CAA0B,aAA1B,GACb,GADa,GACP,OAAO,OAAP,CAAe,UAAf,CAA0B,UAA1B,CAJK;;AAMf,mBAAO,WAAP,GAAqB,IAAI,IAAJ,EAArB,CANe;;AAQf,mBAAO,GAAP,GAAa,YAAkB;;;kDAAN;;iBAAM;;AAC3B,qCAAQ,GAAR,gCAAwB,OAAO,GAAP,CAAW,IAAX,UAAoB,OAAO,OAAP,eAAsB,KAAlE,EAD2B;aAAlB;;;AARE,kBAaf,CAAO,EAAP,CAAU,MAAV,EAAkB,gBAAQ;AACtB,uBAAO,GAAP,CAAW,yBAAe,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAX,EADsB;aAAR,CAAlB,CAbe;;;;;;;;;;;;;;;;;;;;;;;;;;kCAsCT,UAAU;;;AAChB,gBAAI,KAAK,GAAL,EAAU,MAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN,CAAd;;AAEA,iBAAK,GAAL,GAAW,QAAX,CAHgB;;AAKhB,qBAAS,EAAT,CAAY,YAAZ,EAA0B,kBAAU;;AAEhC,uBAAK,UAAL,CAAgB,MAAhB;;;AAFgC,sBAKhC,CAAK,eAAL,CAAqB,MAArB;;;AALgC,sBAQhC,CAAK,SAAL,CAAe,MAAf,EARgC;;AAUhC,oBAAI,OAAK,MAAL,EAAa,OAAO,GAAP,CAAW,WAAX,EAAjB;aAVsB,CAA1B,CALgB;;;;4BA1EV;AAAE,mBAAO,KAAK,IAAL,CAAU,GAAV,CAAT;;;;4BACD;AAAE,mBAAO,KAAK,GAAL,CAAT;;;;4BACA;AAAE,mBAAO,KAAK,OAAL,CAAT;;;WAZP;;;kBAyGS","file":"connection.js","sourcesContent":["/**\n * Custom socket communication layer.\n */\n\n'use strict';\n\nimport Factory from '../factory';\n\nclass Connector {\n\n    constructor(app) {\n        this._app = app;\n        this._userDB = Factory.createUserDB(this);\n        this._io = null;\n        this._debug = false;\n    }\n\n    // Model\n    get hub() { return this._app.hub; }\n    get io() { return this._io; }\n    get db() { return this._userDB; }\n\n    // When the user connects, register him\n    setupUser(socket) {\n        // Add user to app DB\n        var user = this._userDB.registerUser(socket);\n\n        // A user knows its socket and reciprocally\n        socket.user = user;\n\n        // Inform the user that its connection is established\n        // Make him wait a little... Server does not hurry.\n        setTimeout(_ => socket.emit('connected', ''), 400);\n    }\n\n    setupDisconnect(socket) {\n        // Setup off util function\n        socket.off = socket.removeListener;\n\n        // Call onDisconnect.\n        socket.on('disconnect', _ => {\n            var user = socket.user;\n            if (user === undefined) return;\n\n            // Leave from any running game.\n            user.leave(); // First disconnects then makes the game forget.\n\n            // Destroy user.\n            this._userDB.removeUser(user);\n\n            if (this._debug) socket.log('DISCONNECTED');\n        });\n    }\n\n    setupDebug(socket) {\n        this._debug = true;\n\n        socket.address = socket.request.connection.remoteAddress +\n            ':' + socket.request.connection.remotePort;\n\n        socket.connectedAt = new Date();\n\n        socket.log = function(...data) {\n            console.log(`SocketIO ${socket.nsp.name} [${socket.address}]`, ...data);\n        };\n\n        // When the client emits 'info', this listens and executes\n        socket.on('info', data => {\n            socket.log(JSON.stringify(data, null, 2));\n        });\n    }\n\n    /**\n     * Configure socket connections.\n     *\n     * socket.io (v1.x.x) is powered by debug.\n     *\n     * In order to see all the debug output, set DEBUG\n     * (in server/config/local.env.js) to including the desired scope.\n     * (don't forget to import config from './environment' ;)\n     * ex: DEBUG: \"http*,socket.io:socket\"\n     *\n     * We can authenticate socket.io users and access their token through socket.decoded_token\n     * 1. You will need to send the token in `client/components/socket/socket.service.js`\n     * 2. Require authentication here:\n     *      socketio.use(require('socketio-jwt').authorize({\n     *          secret: config.secrets.session,\n     *          handshake: true\n     *      }));\n     *\n     * @param socketio\n     */\n    configure(socketio) {\n        if (this._io) throw new Error(\"Trying to configure a running app.\");\n\n        this._io = socketio;\n\n        socketio.on('connection', socket => {\n            // Define debug functions and attributes\n            this.setupDebug(socket);\n\n            // Define disconnect behaviour\n            this.setupDisconnect(socket);\n\n            // Register user\n            this.setupUser(socket);\n\n            if (this._debug) socket.log('CONNECTED');\n        });\n    }\n\n}\n\nexport default Connector;\n"]}