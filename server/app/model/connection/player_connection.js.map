{"version":3,"sources":["../../../../../server/app/model/connection/player_connection.js"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;;;AAEA;;;;;;IAEM;AAEF,aAFE,gBAEF,CAAY,MAAZ,EAAoB;4CAFlB,kBAEkB;;AAChB,aAAK,OAAL,GAAe,MAAf,CADgB;AAEhB,aAAK,MAAL,GAAc,EAAd,CAFgB;AAGhB,aAAK,UAAL,GAAkB,EAAlB,CAHgB;KAApB;;+BAFE;;6BAQG,MAAM,MAAM;AACb,iBAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,EAAwB,IAAxB,EADa;;;;;;;;;;;2BASd,SAAS,WAAW;AACnB,gBAAI,OAAO,SAAP,KAAqB,UAArB,EACA,QAAQ,GAAR,CAAY,iCAAZ,EADJ,KAEK;AACD,qBAAK,UAAL,CAAgB,IAAhB,CAAqB,OAArB,EADC;AAED,qBAAK,OAAL,CAAa,EAAb,CAAgB,OAAhB,EAAyB,SAAzB,EAFC;aAFL;;;;;;;;;;;4BAaA,SAAS,WAAW;AACpB,iBAAK,OAAL,CAAa,GAAb,CAAiB,OAAjB,EAA0B,SAA1B,EADoB;AAEpB,kCAAgB,eAAhB,CAAgC,KAAK,UAAL,EAAiB,OAAjD,EAFoB;;;;;;;iCAMf;;;AACL,iBAAK,UAAL,CAAgB,OAAhB,CAAwB;uBAAW,MAAK,OAAL,CAAa,kBAAb,CAAgC,OAAhC;aAAX,CAAxB,CADK;AAEL,iBAAK,UAAL,GAAkB,EAAlB,CAFK;;;;;;;;;;6BASJ,MAAM;AACP,iBAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,EADO;AAEP,iBAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB,EAFO;;;;;;;;;;8BASL,MAAM;AACR,iBAAK,OAAL,CAAa,KAAb,CAAmB,IAAnB,EADQ;AAER,kCAAgB,eAAhB,CAAgC,KAAK,MAAL,EAAa,IAA7C,EAFQ;;;;;;;mCAMD;;;AACP,iBAAK,MAAL,CAAY,OAAZ,CAAoB;uBAAQ,OAAK,OAAL,CAAa,KAAb,CAAmB,IAAnB;aAAR,CAApB,CADO;AAEP,iBAAK,MAAL,GAAc,EAAd,CAFO;;;;;;;gCAMH;AACJ,iBAAK,QAAL,GADI;AAEJ,iBAAK,MAAL,GAFI;;;;;;;kCAME;AACN,iBAAK,KAAL,GADM;AAEN,mBAAO,KAAK,OAAL,CAFD;AAGN,mBAAO,KAAK,MAAL,CAHD;AAIN,mBAAO,KAAK,UAAL,CAJD;;;WAzER;;;kBAkFS","file":"player_connection.js","sourcesContent":["/**\n *\n */\n\n'use strict';\n\nimport CollectionUtils from '../../engine/math/collections';\n\nclass PlayerConnection {\n\n    constructor(socket) {\n        this._socket = socket;\n        this._rooms = [];\n        this._listeners = [];\n    }\n\n    send(kind, data) {\n        this._socket.emit(kind, data);\n    }\n\n    /**\n     * Register custom socket behaviour.\n     * @param message\n     * @param behaviour\n     */\n    on(message, behaviour) {\n        if (typeof behaviour !== \"function\")\n            console.log(\"WARN: invalid socket definition\");\n        else {\n            this._listeners.push(message);\n            this._socket.on(message, behaviour);\n        }\n    }\n\n    /**\n     * Stop listening for a specific message.\n     * @param message\n     * @param behaviour the bound function\n     */\n    off(message, behaviour) {\n        this._socket.off(message, behaviour);\n        CollectionUtils.removeFromArray(this._listeners, message);\n    }\n\n    // Remove all listeners.\n    offAll() {\n        this._listeners.forEach(message => this._socket.removeAllListeners(message));\n        this._listeners = [];\n    }\n\n    /**\n     * Join a specific chan.\n     * @param room\n     */\n    join(room) {\n        this._socket.join(room);\n        this._rooms.push(room);\n    }\n\n    /**\n     * Leave a specific chan.\n     * @param room\n     */\n    leave(room) {\n        this._socket.leave(room);\n        CollectionUtils.removeFromArray(this._rooms, room);\n    }\n\n    // Leave all chans this player was connected to.\n    leaveAll() {\n        this._rooms.forEach(room => this._socket.leave(room));\n        this._rooms = [];\n    }\n\n    // Close connection: removes all listeners.\n    close() {\n        this.leaveAll();\n        this.offAll();\n    }\n\n    // Make the object eligible for garbage collection.\n    destroy() {\n        this.close();\n        delete this._socket;\n        delete this._rooms;\n        delete this._listeners;\n    }\n\n}\n\nexport default PlayerConnection;\n"]}