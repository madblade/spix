{"version":3,"sources":["../../../../../server/app/model/connection/user_connection.js"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;;;;;IAEM;AAEF,aAFE,cAEF,CAAY,IAAZ,EAAkB,MAAlB,EAA0B;4CAFxB,gBAEwB;;AACtB,aAAK,KAAL,GAAa,IAAb,CADsB;AAEtB,aAAK,OAAL,GAAe,MAAf,CAFsB;;AAItB,aAAK,MAAL,GAJsB;KAA1B;;;;;+BAFE;;6BAcG,MAAM,MAAM;AACb,iBAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,EAAwB,IAAxB,EADa;;;;;;;iCAKR;;;AAGL,iBAAK,OAAL,CAAa,EAAb,CAAgB,MAAhB,EAAwB,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAAxB,EAHK;;;;;;;;sCAQK,MAAM;AAChB,oBAAQ,KAAK,OAAL;;;AAGJ,qBAAK,YAAL;AACI,wBAAI,KAAK,cAAL,CAAoB,UAApB,CAAJ,EAAqC,KAAK,gBAAL,CAAsB,KAAK,QAAL,CAAtB,CAArC;AACA,0BAFJ;;;AAHJ,qBAQS,UAAL;AACI,4BAAQ,GAAR,CAAY,wBAAZ,EADJ;AAEI,wBAAI,CAAC,KAAK,cAAL,CAAoB,QAApB,CAAD,IAAkC,CAAC,KAAK,cAAL,CAAoB,UAApB,CAAD,IAC/B,CAAC,KAAK,MAAL,IAAe,CAAC,KAAK,QAAL,IAAiB,CAAC,KAAK,cAAL,CAAoB,IAApB,CAAD,EAA4B;AACjE,6BAAK,IAAL,CAAU,UAAV,EAAsB,KAAtB,EADiE;qBADrE;AAIA,0BANJ;;;AARJ,qBAiBS,KAAL;AACI,yBAAK,iBAAL,GADJ;AAEI,0BAFJ;AAjBJ,aADgB;;;;yCAwBH,MAAM;AACnB,gBAAM,UAAU,KAAK,KAAL,CAAW,cAAX,CAA0B,IAA1B,CAAV,CADa;AAEnB,gBAAI,OAAJ,EAAa,QAAQ,GAAR,CAAY,mBAAZ,EAAb;AACA,mBAAO,OAAP,CAHmB;;;;uCAMR,MAAM;AACjB,gBAAM,SAAS,KAAK,KAAL,CAAW,IAAX,CAAgB,KAAK,QAAL,EAAe,KAAK,MAAL,CAAxC,CADW;AAEjB,gBAAI,MAAJ,EAAY,KAAK,IAAL,CAAU,QAAV,EAAoB,KAApB,EAAZ;AACA,mBAAO,MAAP,CAHiB;;;;4CAMD;AAChB,iBAAK,KAAL,CAAW,aAAX,GADgB;;;;+BAIb;AACH,iBAAK,OAAL,CAAa,GAAb,CAAiB,MAAjB,EAAyB,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAAzB,EADG;;;;;;;kCAKG;AACN,iBAAK,IAAL,GADM;AAEN,mBAAO,KAAK,KAAL,CAFD;AAGN,mBAAO,KAAK,OAAL,CAHD;;;;4BA9DC;AAAE,mBAAO,KAAK,KAAL,CAAT;;0BACF,MAAM;AAAE,iBAAK,KAAL,GAAa,IAAb,CAAF;;;;4BACF;AAAE,mBAAO,KAAK,OAAL,CAAT;;;WAZX;;;kBAgFS","file":"user_connection.js","sourcesContent":["/**\n *\n */\n\n'use strict';\n\nclass UserConnection {\n\n    constructor(user, socket) {\n        this._user = user;\n        this._socket = socket;\n\n        this.listen();\n    }\n\n    // Model\n    get user() { return this._user; }\n    set user(user) { this._user = user; }\n    get socket() { return this._socket; }\n\n    send(kind, data) {\n        this._socket.emit(kind, data);\n    }\n\n    // Game & hub management.\n    listen() {\n        // Use a unique channel for util functions\n        // Actions are specified within the data\n        this._socket.on('util', this.onUserRequest.bind(this));\n    }\n\n    // Drawback: switch potentially evaluates all statements\n    // Advantage: does not loads the socket with many listeners\n    onUserRequest(data) {\n        switch (data.request) {\n\n            // A user can ask the hub for a new game to be created.\n            case 'createGame':\n                if (data.hasOwnProperty('gameType')) this.handleCreateGame(data.gameType);\n                break;\n\n            // A user can join a specific game (given a kind and id).\n            case 'joinGame':\n                console.log('A player tries to join');\n                if (!data.hasOwnProperty('gameId') || !data.hasOwnProperty('gameType')\n                    || !data.gameId || !data.gameType || !this.handleJoinGame(data)) {\n                    this.send('cantjoin', 'foo');\n                }\n                break;\n\n            // A user can ask for the list of all available games.\n            case 'hub':\n                this.handleGetHubState();\n                break;\n        }\n    }\n\n    handleCreateGame(kind) {\n        const created = this._user.requestNewGame(kind);\n        if (created) console.log('Created new game.');\n        return created;\n    }\n\n    handleJoinGame(data) {\n        const joined = this._user.join(data.gameType, data.gameId);\n        if (joined) this.send('joined', 'foo');\n        return joined;\n    }\n\n    handleGetHubState() {\n        this._user.fetchHubState();\n    }\n\n    idle() {\n        this._socket.off('util', this.onUserRequest.bind(this));\n    }\n\n    // Clean references.\n    destroy() {\n        this.idle();\n        delete this._user;\n        delete this._socket;\n    }\n\n}\n\nexport default UserConnection;\n"]}