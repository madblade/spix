{"version":3,"sources":["../../../../../../../server/app/engine/game3d/engine_topology/updater/updater.js"],"names":[],"mappings":"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","file":"updater.js","sourcesContent":["/**\n * Transform and operate chunks.\n */\n\n'use strict';\n\nimport UpdaterAccess from './updater_access';\nimport UpdaterBlock from './updater_block';\nimport UpdaterFace from './updater_face';\n\nclass Updater {\n\n    constructor(topologyEngine) {\n        // Models.\n        this._worldModel   = topologyEngine.worldModel;\n        this._entityModel  = topologyEngine.entityModel;\n\n        this._outputBuffer = topologyEngine.outputBuffer;\n    }\n\n    update(inputBuffer) {\n        inputBuffer.forEach(input => {\n            let data = input[0];\n            let avatar = input[1];\n            let worldId = avatar.worldId;\n            if (!worldId) return; // Avatar was disconnected between input & update.\n\n            let meta = data.meta;\n            let action = meta[0];\n\n            // Manage block addition.\n            if (action === \"add\") {\n                this.addBlock(avatar, meta[1], meta[2], meta[3], meta[4]);\n            } else if (action === \"del\") {\n                this.delBlock(avatar, meta[1], meta[2], meta[3]);\n            }\n        });\n    }\n\n    addBlock(avatar, x, y, z, blockId) {\n        let worldId = avatar.worldId;\n        let world = this._worldModel.getWorld(worldId);\n        let o = this._outputBuffer;\n        let em = this._entityModel;\n\n        let a = UpdaterAccess.addBlock(avatar, x, y, z, blockId, world, em);\n        if (!a) return;\n\n        let $chunk, $x, $y, $z, $blockId;\n        [$chunk, $x, $y, $z, $blockId] = a;\n\n        let $id = $chunk.add($x, $y, $z, $blockId);\n        UpdaterBlock.updateSurfaceBlocksAfterAddition($chunk, $id, $x, $y, $z);\n        let updatedChunks = UpdaterFace.updateSurfaceFacesAfterAddition($chunk, $id, $x, $y, $z);\n\n        // Push updates.\n        updatedChunks.forEach(c => o.chunkUpdated(worldId, c.chunkId));\n        o.chunkUpdated(worldId, $chunk.chunkId);\n    }\n\n    delBlock(avatar, x, y, z) {\n        let worldId = avatar.worldId;\n        let world = this._worldModel.getWorld(worldId);\n        let o = this._outputBuffer;\n        let em = this._entityModel;\n\n        let a = UpdaterAccess.delBlock(avatar, x, y, z, world, em);\n        if (!a) return;\n\n        let $chunk, $x, $y, $z;\n        [$chunk, $x, $y, $z] = a;\n\n        let $id = $chunk.del($x, $y, $z);\n        UpdaterBlock.updateSurfaceBlocksAfterDeletion($chunk, $id, $x, $y, $z);\n        let updatedChunks = UpdaterFace.updateSurfaceFacesAfterDeletion($chunk, $id, $x, $y, $z);\n\n        // Push updates.\n        updatedChunks.forEach(c => o.chunkUpdated(worldId, c.chunkId));\n        o.chunkUpdated(worldId, $chunk.chunkId);\n    }\n\n}\n\nexport default Updater;\n"]}