{"version":3,"sources":["../../../../../../server/app/engine/game3d/engine_topology/topology.js"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;;;IAEM;AAEF,aAFE,cAEF,CAAY,IAAZ,EAAkB;4CAFhB,gBAEgB;;;AAEd,aAAK,YAAL,GAA0B,KAAK,WAAL,CAFZ;AAGd,aAAK,WAAL,GAA0B,KAAK,UAAL,CAHZ;AAId,aAAK,OAAL,GAA0B,KAAK,MAAL,CAJZ;AAKd,aAAK,iBAAL,GAA0B,KAAK,gBAAL;;;AALZ,YAQd,CAAK,YAAL,GAA0B,4BAA1B,CARc;AASd,aAAK,aAAL,GAA0B,6BAA1B;;;AATc,YAYd,CAAK,SAAL,GAA0B,uBAAa,IAAb,CAA1B;AAZc,YAad,CAAK,QAAL,GAA0B,sBAAY,IAAZ,CAA1B;AAbc,KAAlB;;+BAFE;;iCAuBO,MAAM,QAAQ;;AAEnB,gBAAI,MAAM,OAAO,QAAP,CAFS;AAGnB,gBAAI,eAAe,EAAE,UAAU,CAAC,IAAI,CAAJ,CAAD,EAAS,IAAI,CAAJ,CAAT,EAAiB,IAAI,CAAJ,CAAjB,CAAV,EAAoC,SAAS,OAAO,OAAP,EAA9D,CAHe;;AAKnB,iBAAK,YAAL,CAAkB,QAAlB,CAA2B,IAA3B,EAAiC,YAAjC,EALmB;;;;iCAQd;AACL,iBAAK,QAAL,CAAc,MAAd,CAAqB,KAAK,YAAL,CAAkB,QAAlB,EAArB,EADK;AAEL,iBAAK,YAAL,CAAkB,KAAlB,GAFK;;;;;;;oCAMG;AACR,mBAAO,KAAK,aAAL,CAAmB,SAAnB,EAAP,CADQ;;;;;;;;2CAMO,GAAG,eAAe,WAAW;AAC5C,gBAAI,aAAa,KAAK,WAAL,CAD2B;AAE5C,gBAAI,mBAAmB,KAAK,iBAAL,CAFqB;AAG5C,mBAAO,KAAK,SAAL,CAAe,4BAAf,CAA4C,CAA5C,EAA+C,UAA/C,EAA2D,gBAA3D,EAA6E,aAA7E,EAA4F,SAA5F,CAAP,CAH4C;;;;sCAMlC;AACV,iBAAK,aAAL,CAAmB,WAAnB,CAA+B,KAAK,WAAL,CAA/B,CADU;;;;4BA/Bc;AAAE,mBAAO,KAAK,YAAL,CAAT;;;;4BACA;AAAE,mBAAO,KAAK,WAAL,CAAT;;;;4BACA;AAAE,mBAAO,KAAK,SAAL,CAAT;;;;4BACA;AAAE,mBAAO,KAAK,aAAL,CAAT;;;WArB1B;;;kBAuDS","file":"topology.js","sourcesContent":["/**\n *\n */\n\n'use strict';\n\nimport InputBuffer      from './input_buffer';\nimport OutputBuffer     from './output_buffer';\n\nimport Selector         from './selector/selector';\nimport Updater          from './updater/updater';\n\nclass TopologyEngine {\n\n    constructor(game) {\n        // Models.\n        this._entityModel       = game.entityModel;\n        this._worldModel        = game.worldModel;\n        this._xModel            = game.xModel;\n        this._consistencyModel  = game.consistencyModel;\n\n        // Buffers.\n        this._inputBuffer       = new InputBuffer();\n        this._outputBuffer      = new OutputBuffer();\n\n        // Engine.\n        this._selector          = new Selector(this); // Extracts subsets for players.\n        this._updater           = new Updater(this);  // Updates model. Needs Accessor.\n    }\n\n    get entityModel()           { return this._entityModel; }\n    get worldModel()            { return this._worldModel; }\n    get selector()              { return this._selector; }\n    get outputBuffer()          { return this._outputBuffer; }\n\n    addInput(meta, avatar) {\n        // Security: copy avatar state before physics engine updates positions and world translations.\n        let pos = avatar.position;\n        let secureAvatar = { position: [pos[0], pos[1], pos[2]], worldId: avatar.worldId};\n\n        this._inputBuffer.addInput(meta, secureAvatar);\n    }\n\n    update() {\n        this._updater.update(this._inputBuffer.getInput());\n        this._inputBuffer.flush();\n    }\n\n    // Get (chunk id, blocks) map for updated chunks.\n    getOutput() {\n        return this._outputBuffer.getOutput();\n    }\n\n    // Get (chunk id, updates) object for updated chunks concerning specific player.\n    // TODO [HIGH] put in consistency model.\n    getOutputForPlayer(p, updatedChunks, newChunks) {\n        let worldModel = this._worldModel;\n        let consistencyModel = this._consistencyModel;\n        return this._selector.selectUpdatedChunksForPlayer(p, worldModel, consistencyModel, updatedChunks, newChunks);\n    }\n\n    flushOutput() {\n        this._outputBuffer.flushOutput(this._worldModel);\n    }\n\n}\n\nexport default TopologyEngine;\n"]}