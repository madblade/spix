{"version":3,"sources":["../../../../../../../server/app/engine/game3d/engine_consistency/loader/loader_x.js"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;IAEM;AAEF,aAFE,OAEF,CAAY,iBAAZ,EAA+B;4CAF7B,SAE6B;;AAC3B,aAAK,OAAL,GAAe,kBAAkB,MAAlB,CADY;AAE3B,aAAK,WAAL,GAAmB,kBAAkB,UAAlB,CAFQ;AAG3B,aAAK,iBAAL,GAAyB,kBAAkB,gBAAlB,CAHE;KAA/B;;+BAFE;;2CAQiB,QAAQ;;;AACvB,gBAAI,IAAI,OAAO,MAAP,CADe;AAEvB,gBAAI,WAAW,EAAE,EAAF,CAFQ;AAGvB,gBAAI,IAAI,EAAE,QAAF,CAHe;AAIvB,gBAAI,UAAU,EAAE,OAAF,CAJS;AAKvB,gBAAI,sBAAsB,EAAE,oBAAF,CALH;;AAOvB,gBAAI,KAAK,KAAK,WAAL,CAPc;AAQvB,gBAAI,KAAK,KAAK,OAAL,CARc;AASvB,gBAAI,KAAK,KAAK,iBAAL,CATc;;AAWvB,gBAAI,QAAQ,mBAAG,QAAH,CAAY,OAAZ,GAAqB,qBAArB,sDAA8C,EAA9C,CAAR;;;;;AAXmB,gBAgBnB,eAAe,GAAG,eAAH,CAAmB,OAAnB,EAA4B,MAAM,OAAN,EAAe,EAA3C,EAA+C,mBAA/C,CAAf,CAhBmB;AAiBvB,gBAAI,CAAC,YAAD,EAAe,OAAnB;AACA,gBAAI,eAAe,EAAf,CAlBmB;AAmBvB,gBAAI,UAAU,aAAa,CAAb,CAAV,CAnBmB;AAoBvB,gBAAI,OAAJ,EAAa,QAAQ,OAAR,CAAgB,UAAC,KAAD,EAAQ,QAAR,EAAqB;AAC9C,oBAAI,UAAU,GAAG,UAAH,EAAV,CAD0C;AAE9C,oBAAI,GAAG,IAAH,CAAQ,QAAR,EAAkB,QAAlB,KAA+B,CAAC,OAAD,EAAU,OAA7C;;;AAF8C,oBAK1C,OAAJ,EAAa;AACT,wBAAI,KAAJ,EAAW;AACP,qCAAa,QAAb,+CAA6B,OAA7B;AADO,0BAEP,CAAG,aAAH,CAAiB,QAAjB,EAA2B,QAA3B,EAFO;qBAAX;AADS,iBAAb,MAKO;AACH,4BAAI,KAAJ,EAAW;AACP,yCAAa,QAAb,+CAA6B,OAA7B,CADO;yBAAX,MAEO;;AAEH,yCAAa,QAAb,IAAyB,CAAC,CAAD,CAAzB;;AAFG,8BAIH,CAAG,WAAH,CAAe,QAAf,EAAyB,QAAzB,EAJG;yBAFP;qBANJ;aALyB,CAAhB,CAAb;;;;AApBuB,gBA4CnB,WAAW,GAAG,gBAAH,CAAoB,QAApB,CAAX,CA5CmB;AA6CvB,gBAAI,iBAAiB,EAAjB,CA7CmB;;AA+CvB,gBAAI,SAAS,aAAa,CAAb,CAAT,CA/CmB;AAgDvB,gBAAI,MAAJ,EAAY;;AACR,wBAAI,QAAQ,mBAAR;AACJ,2BAAO,OAAP,CAAe;+BAAK,MAAM,GAAN,CAAU,EAAE,CAAF,IAAK,GAAL,GAAS,EAAE,CAAF,CAAT,EAAe,EAAE,CAAF,CAAzB;qBAAL,CAAf;;AAEA,6BAAS,OAAT,CAAiB,oBAAY;AACzB,4BAAI,IAAI,GAAG,SAAH,CAAa,QAAb,CAAJ,CADqB;AAEzB,4BAAI,IAAI,EAAE,OAAF,GAAU,GAAV,GAAc,EAAE,OAAF,CAFG;AAGzB,4BAAI,IAAI,MAAM,GAAN,CAAU,CAAV,CAAJ,CAHqB;AAIzB,4BAAI,MAAM,SAAN,IAAmB,MAAM,IAAN,IAAc,IAAI,mBAAJ,EACjC,eAAe,QAAf,IAA2B,IAA3B,CADJ;qBAJa,CAAjB;qBAJQ;aAAZ;;AAaA,mBAAO,CAAC,YAAD,EAAe,cAAf,CAAP,CA7DuB;;;WARzB;;;kBA0ES","file":"loader_x.js","sourcesContent":["/**\n *\n */\n\n'use strict';\n\nimport GeometryUtils        from '../../../math/geometry';\n\nclass XLoader {\n\n    constructor(consistencyEngine) {\n        this._xModel = consistencyEngine.xModel;\n        this._worldModel = consistencyEngine.worldModel;\n        this._consistencyModel = consistencyEngine.consistencyModel;\n    }\n\n    computeNewXInRange(player) {\n        let a = player.avatar;\n        let avatarId = a.id;\n        let p = a.position;\n        let worldId = a.worldId;\n        let portalLoadingRadius = a.portalRenderDistance;\n\n        let wm = this._worldModel;\n        let xm = this._xModel;\n        let cm = this._consistencyModel;\n\n        let chunk = wm.getWorld(worldId).getChunkByCoordinates(...p);\n        // Format:\n        // Map (portal id -> [other portal id, other portal world])\n\n        // Compute new portals in range.\n        let connectivity = xm.getConnectivity(worldId, chunk.chunkId, wm, portalLoadingRadius);\n        if (!connectivity) return;\n        let addedPortals = {};\n        let portals = connectivity[0];\n        if (portals) portals.forEach((array, portalId) => {\n            let partial = cm.isPartialX();\n            if (cm.hasX(avatarId, portalId) && !partial) return;\n\n            // Manage other end as a whole.\n            if (partial) {\n                if (array) {\n                    addedPortals[portalId] = [...array]; // Other end id, chunk, xyzp, orientation, world id.\n                    cm.unsetPartialX(avatarId, portalId);\n                } // Else, nothing to do still.\n            } else {\n                if (array) {\n                    addedPortals[portalId] = [...array];\n                } else {\n                    // If those other ids have length 0, client will consider the portal blank.\n                    addedPortals[portalId] = [0];\n                    // Then they are flagged as 'partial' in consistency model.\n                    cm.setPartialX(avatarId, portalId);\n                }\n            }\n        });\n\n        // Update out of range portals.\n        // TODO [OPTIM] when getConnectivity is performed, just remember which levels correspond to which portals...\n        let playerXs = cm.getXIdsForEntity(avatarId);\n        let removedPortals = {};\n\n        let chunks = connectivity[1];\n        if (chunks) {\n            let marks = new Map();\n            chunks.forEach(c => marks.set(c[0]+','+c[1], c[2]));\n\n            playerXs.forEach(portalId => {\n                let p = xm.getPortal(portalId);\n                let i = p.worldId+','+p.chunkId;\n                let d = marks.get(i);\n                if (d === undefined || d === null || d > portalLoadingRadius)\n                    removedPortals[portalId] = null;\n            });\n        }\n\n        return [addedPortals, removedPortals];\n    }\n\n}\n\nexport default XLoader;\n"]}