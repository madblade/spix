{"version":3,"sources":["../../../../../../../server/app/engine/game3d/engine_consistency/loader/loader_entity.js"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;;;AAEA;;;;;;IAEM;AAEF,aAFE,YAEF,CAAY,iBAAZ,EAA+B;4CAF7B,cAE6B;;AAC3B,aAAK,YAAL,GAAoB,kBAAkB,WAAlB,CADO;AAE3B,aAAK,iBAAL,GAAyB,kBAAkB,gBAAlB,CAFE;KAA/B;;+BAFE;;+CAOqB,QAAQ;AAC3B,gBAAI,cAAc,KAAK,YAAL,CADS;AAE3B,gBAAI,SAAS,OAAO,MAAP,CAFc;AAG3B,gBAAI,MAAM,OAAO,EAAP,CAHiB;AAI3B,gBAAI,WAAW,EAAX,CAJuB;;AAM3B,gBAAI,SAAS,OAAO,oBAAP,CANc;AAO3B,sBAAU,MAAV;AAP2B,gBAQvB,WAAW,mBAAc,8BAAd;;;AARY,uBAW3B,CAAY,OAAZ,CAAoB,aAAK;AAAE,oBAAI,MAAM,EAAE,EAAF,CAAZ,IAAsB,QAAQ,GAAR,EAAa;AACxD,wBAAI,SAAS,CAAT,EAAY,MAAZ,IAAsB,MAAtB,EACA,SAAS,GAAT,IAAgB,EAAC,GAAE,EAAE,QAAF,EAAY,GAAE,EAAE,QAAF,EAAY,GAAE,EAAE,IAAF,EAA/C,CADJ;iBADuC;aAAvB,CAApB;;;;;AAX2B,mBAmBpB,QAAP,CAnB2B;;;;kDAsBL,QAAQ,iBAAiB,cAAc,gBAAgB;AAC7E,gBAAI,cAAc,KAAK,YAAL,CAD2D;AAE7E,gBAAI,mBAAmB,KAAK,iBAAL,CAFsD;AAG7E,gBAAI,SAAS,OAAO,MAAP,CAHgE;AAI7E,gBAAI,SAAS,OAAO,oBAAP,CAJgE;AAK7E,sBAAU,MAAV;;;AAL6E,gBAQzE,WAAW,mBAAc,8BAAd,CAR8D;;AAU7E,gBAAI,gBAAgB,EAAhB,CAVyE;AAW7E,gBAAI,kBAAkB,EAAlB;;;;AAXyE,gBAezE,MAAM,OAAO,EAAP,CAfmE;AAgB7E,wBAAY,OAAZ,CAAoB,aAAK;AAAE,oBAAI,MAAM,EAAE,EAAF,CAAZ,IAAsB,QAAQ,GAAR,EAAa;;;;AAGxD,wBAAI,YAAY,SAAS,CAAT,EAAY,MAAZ,IAAsB,MAAtB;;;AAHwC,wBAMpD,YAAY,iBAAiB,SAAjB,CAA2B,GAA3B,EAAgC,GAAhC,CAAZ,CANoD;;AAQxD,wBAAI,aAAa,CAAC,SAAD,EACb,cAAc,GAAd,IAAqB,EAAC,GAAE,EAAE,QAAF,EAAY,GAAE,EAAE,QAAF,EAAY,GAAE,EAAE,IAAF,EAApD,CADJ,KAGK,IAAI,CAAC,SAAD,IAAc,SAAd,EACL,gBAAgB,GAAhB,IAAuB,IAAvB,CADC,KAGA,IAAI,aAAa,gBAAgB,GAAhB,CAAoB,GAApB,CAAb,EACL,cAAc,GAAd,IAAqB,EAAC,GAAE,EAAE,QAAF,EAAY,GAAE,EAAE,QAAF,EAAY,GAAE,EAAE,IAAF,EAApD,CADC;iBAdkC;aAAvB,CAApB,CAhB6E;;AAkC7E,2BAAe,OAAf,CAAuB,eAAO;AAC1B,oBAAI,iBAAiB,SAAjB,CAA2B,GAA3B,EAAgC,GAAhC,CAAJ,EACI,gBAAgB,GAAhB,IAAuB,IAAvB,CADJ;aADmB,CAAvB,CAlC6E;;AAuC7E,mBAAO,CAAC,aAAD,EAAgB,eAAhB,CAAP,CAvC6E;;;WA7B/E;;;kBAwES","file":"loader_entity.js","sourcesContent":["/**\n * Load and prepare chunks for players.\n */\n\n'use strict';\n\nimport GeometryUtils        from '../../../math/geometry';\n\nclass EntityLoader {\n\n    constructor(consistencyEngine) {\n        this._entityModel = consistencyEngine.entityModel;\n        this._consistencyModel = consistencyEngine.consistencyModel;\n    }\n\n    computeEntitiesInRange(player) {\n        let entityModel = this._entityModel;\n        let avatar = player.avatar;\n        let aid = avatar.id;\n        var entities = {};\n\n        let thresh = avatar.entityRenderDistance;\n        thresh *= thresh; // Squared distance.\n        let distance = GeometryUtils.entitySquaredEuclideanDistance;\n\n        // TODO [LACKS] optim O(n²) -> O(Cn)\n        entityModel.forEach(e => { let eid = e.id; if (eid !== aid) {\n            if (distance(e, avatar) < thresh)\n                entities[eid] = {p:e.position, r:e.rotation, k:e.kind};\n        }});\n\n        // TODO [HIGH] worldify: compute entities on loaded chunks.\n        // (as it is the only way to detect in-range entities)\n\n        return entities;\n    }\n\n    computeNewEntitiesInRange(player, updatedEntities, addedPlayers, removedPlayers) {\n        let entityModel = this._entityModel;\n        let consistencyModel = this._consistencyModel;\n        let avatar = player.avatar;\n        let thresh = avatar.entityRenderDistance;\n        thresh *= thresh; // Squared distance.\n\n        // TODO [HIGH] also compute entities on loaded chunks.\n        let distance = GeometryUtils.entitySquaredEuclideanDistance;\n\n        var addedEntities = {};\n        var removedEntities = {};\n\n        // TODO [LACKS]: O(n²) -> O(Cn).\n        // TODO [HIGH]: also use for AABB phase in physics.\n        let aid = avatar.id;\n        entityModel.forEach(e => { let eid = e.id; if (eid !== aid) { // For all different entities.\n\n            // Compute distance & find in OLD consistency model.\n            let isInRange = distance(e, avatar) < thresh;\n\n            // TODO [PERF] n² log² n !!\n            let isPresent = consistencyModel.hasEntity(aid, eid);\n\n            if (isInRange && !isPresent)\n                addedEntities[eid] = {p:e.position, r:e.rotation, k:e.kind};\n\n            else if (!isInRange && isPresent)\n                removedEntities[eid] = null;\n\n            else if (isInRange && updatedEntities.has(eid))\n                addedEntities[eid] = {p:e.position, r:e.rotation, k:e.kind};\n        }});\n\n        removedPlayers.forEach(eid => {\n            if (consistencyModel.hasEntity(aid, eid))\n                removedEntities[eid] = null;\n        });\n\n        return [addedEntities, removedEntities];\n    }\n}\n\nexport default EntityLoader;\n"]}