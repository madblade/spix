{"version":3,"sources":["../../../../../../../server/app/engine/game3d/engine_consistency/builder/surface_faces_linker.js"],"names":[],"mappings":"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","file":"surface_faces_linker.js","sourcesContent":["/**\n *\n */\n\n'use strict';\n\nimport CSFX from './surface_faces_builder';\n\nclass FaceLinker {\n\n    static flatToCoords(flatId, iS, ijS) {\n        const i = flatId % iS;\n        const j = ((flatId-i) % ijS) / iS;\n        const k = (flatId-(flatId%ijS)) / ijS;\n        return (i+','+j+','+k);\n    }\n\n    static findN(ci, cj, ck, ci$, cj$, ck$) {\n        const deltaI = 1 + ci$ - ci;\n        const deltaJ = 1 + cj$ - cj;\n        const deltaK = 1 + ck$ - ck;\n\n        const dd = deltaI + 3*deltaJ + 9*deltaK;\n\n        switch(dd) {\n            //case 0: \tbreak;\n            case 1:     return 17;\n            //case 2: \tbreak;\n            case 3:     return 12;\n            case 4:     return 5;\n            case 5:     return 10;\n            //case 6: \tbreak;\n            case 7:     return 16;\n            //case 8: \tbreak;\n            case 9:     return 9;\n            case 10:    return 3;\n            case 11:    return 8;\n            case 12:    return 1;\n            //case 13: \tbreak;\n            case 14:    return 0;\n            case 15:    return 7;\n            case 16:    return 2;\n            case 17:    return 6;\n            //case 18: \tbreak;\n            case 19:    return 15;\n            case 20:    return 4;\n            case 21:    return 13;\n            //case 22: \tbreak;\n            case 23:    return 11;\n            //case 24: \tbreak;\n            case 25:    return 14;\n            //case 26: \tbreak;\n        }\n    }\n\n    // call linkCriterion(flatId, otherFlatId,\n    //                      -1 0 1, -1 0 1, -1 0 1,\n    //                      chunkI, chunkJ, chunkK capacity, blocks, neighbourBlocks)\n    static linkCriterion(indexS, indexD,\n                         deltaI, deltaJ, deltaK,\n                         ci, cj, ck,\n                         iS, ijS, capacity,\n                         blocks, neighbourBlocks)\n    {\n        const dimI = iS;\n        const dimJ = ijS/iS;\n        const dimK = capacity/ijS;\n\n        // Extract\n        const i = indexS % iS;\n        const j = ((indexS-i) % ijS) / iS;\n        const k = (indexS-(indexS%ijS)) / ijS;\n\n        // Detect and shift\n        let i$ = i;\n        let j$ = j;\n        let k$ = k;\n        let ci$ = ci;\n        let cj$ = cj;\n        let ck$ = ck;\n\n        if (deltaI > 0) {\n            if (indexD % iS === 0) { // T1\n                ci$ = ci+1;\n                i$ = 0;\n            } else i$ = i+1;\n        } else if (deltaI < 0) {\n            if (indexD % iS === iS-1) { // T4\n                ci$ = ci-1;\n                i$ = dimI-1;\n            } else i$ = i-1;\n        }\n\n        if (deltaJ > 0) {\n            if ((indexD-i$)%ijS === 0) { // T2\n                cj$ = cj+1;\n                j$ = 0;\n            } else j$ = j+1;\n        } else if (deltaJ < 0) {\n            if ((indexD-i$)%ijS === ijS-1) { // T5\n                cj$ = cj-1;\n                j$ = dimJ-1;\n            } else j$ = j-1;\n        }\n\n        if (deltaK > 0) {\n            if (indexD >= capacity) { // T3\n                ck$ = ck+1;\n                k$ = 0;\n            } else k$ = k+1;\n        }  else if (deltaK < 0) { // should never be covered\n            if (indexD < 0) { // T6\n                ck$ = ck - 1;\n                k$ = dimK - 1;\n            } else k$ = k-1;\n        }\n\n        // Compute\n        const ijk$ = i$ + j$ * iS + k$ * ijS;\n\n        // Locate\n        let bs;\n        if (ci === ci$ && cj === cj$ && ck === ck$) {\n            bs = blocks[ijk$];\n        }\n        else {\n            const n = FaceLinker.findN(ci, cj, ck, ci$, cj$, ck$);\n            bs = neighbourBlocks[n][ijk$];\n            // console.log(indexS + \"|\" + indexD + \" : \" +i$+ \",\" +j$+ \",\" +k$+ \"  \" + ijk$ + \" | \" + n + \" | \" + bs);\n        }\n\n        // Criterion\n        return bs === 0;\n    }\n    \n    static affect(components, id1, id2) {\n        if (components[id1] === 0) console.log(\"Error @affect after link: (id1) \" + id1 + \" has 0 component id.\");\n        if (components[id2] === 0) console.log(\"Error @affect after link: (id2) \" + id2 + \" has 0 component id.\");\n\n        if (components[id1] < components[id2]) {\n            components[id2] = components[id1];\n        } else {\n            components[id1] = components[id2];\n        }\n    }\n\n    // TODO [MEDIUM] Z cases verification.\n    // TODO [HIGH] manage topology.\n    // TODO [HIGH] manage topology client-side.\n    /**\n     * Neighbours: 0 x+, 1 x-, 2 y+, 3 y-, 4 z+, 5 z-\n     */\n    static linkI(flatFaceId, cc, ec, faces, merger, capacity, iS, ijS, blocks, neighbourBlocks, ci, cj, ck) {\n\n        // Lazy termination (prevent id calculations).\n        const val = faces[0][flatFaceId];\n        if (!val) {\n            console.log(\"WARN. i-* linker was given a faceId which is not present in faces array.\");\n            return;\n        }\n\n        const normalP = val > 0;\n        const normalM = val < 0;\n\n        // Working with flat indices (3 arrays of length 'capacity')\n        // Working with stacked indices (1 array with [0,capacity[=i, [capacity,2capacity[=j, ...)\n        const stackFaceId = flatFaceId;\n\n        // CASE 1: aligned with top and back i (both normals)\n        const top = flatFaceId + ijS;\n        const ftop = faces[0][top];\n        if (top < capacity) {\n            if (\n                normalP && ftop > 0 ||\n                normalM && ftop < 0\n                )\n            {\n                if (CSFX.debugLinks) console.log(stackFaceId + \" i linked to top i \" + top);\n                if (ec[top] !== cc[top] && cc[top] !== cc[stackFaceId])\n                {\n                    if (CSFX.debugPostMerger) console.log('i, current k: ' + cc[top] + ', ' + cc[stackFaceId]);\n                    merger.push([cc[top], cc[stackFaceId]]);\n                }\n                FaceLinker.affect(cc, top, stackFaceId);\n            }\n        }\n\n        const back = flatFaceId + iS;\n        const fback = faces[0][back];\n        if (back % ijS === (flatFaceId % ijS) + iS) {\n            if (\n                normalP && fback > 0 ||\n                normalM && fback < 0\n                )\n            {\n                if (CSFX.debugLinks) console.log(stackFaceId + \" i linked to back i \" + back);\n                if (ec[back] !== cc[back] && cc[back] !== cc[stackFaceId])\n                {\n                    if (CSFX.debugPostMerger) console.log('i, current k: ' + cc[back] + ', ' + cc[stackFaceId]);\n                    merger.push([cc[back], cc[stackFaceId]]);\n                }\n                FaceLinker.affect(cc, back, stackFaceId);\n            }\n        }\n\n        // CASE 2: orthogonal with CURRENT top and back (j, k)\n        const flatTopOrtho = flatFaceId; // k, obviously inbounds POTENTIALLY MERGED\n        const ftopo = faces[2][flatTopOrtho];\n        if (\n                normalP && ftopo > 0 &&\n                FaceLinker.linkCriterion(flatFaceId, flatFaceId+1+ijS, 1, 0, 1, ci, cj, ck, iS, ijS, capacity, blocks, neighbourBlocks)\n                ||\n                normalM && ftopo < 0\n            )\n        {\n            const stackTopOrtho = 2 * capacity + flatFaceId;\n            if (CSFX.debugLinks) console.log(stackFaceId + ' i linked to current k ' + stackTopOrtho);\n            if (ec[stackTopOrtho] !== cc[stackTopOrtho] && cc[stackTopOrtho] !== cc[stackFaceId])\n            {\n                if (CSFX.debugPostMerger) console.log('i, current k: ' + cc[stackTopOrtho] + ', ' + cc[stackFaceId]);\n                merger.push([cc[stackTopOrtho], cc[stackFaceId]]);\n            }\n            FaceLinker.affect(cc, stackTopOrtho, stackFaceId);\n        }\n\n        const flatBackOrtho = flatFaceId; // j, obviously inbounds POTENTIALLY MERGED\n        const fbacko = faces[1][flatBackOrtho];\n        if (\n                normalP && fbacko > 0 &&\n                FaceLinker.linkCriterion(flatFaceId, flatFaceId+1+iS, 1, 1, 0, ci, cj, ck, iS, ijS, capacity, blocks, neighbourBlocks)\n                ||\n                normalM && fbacko < 0\n            )\n        {\n            const stackBackOrtho = capacity + flatFaceId;\n            if (CSFX.debugLinks) console.log(stackFaceId + ' i linked to current j ' + stackBackOrtho);\n            if (ec[stackBackOrtho] !== cc[stackBackOrtho] && cc[stackBackOrtho] !== cc[stackFaceId])\n            {\n                if (CSFX.debugPostMerger) console.log('i, current j: ' + cc[stackBackOrtho] + ', ' + cc[stackFaceId]);\n                merger.push([cc[stackBackOrtho], cc[stackFaceId]]);\n            }\n            FaceLinker.affect(cc, stackBackOrtho, stackFaceId);\n        }\n\n        // CASE 3: orthogonal with next top and back (j, k)\n        // !!! REVERSE NORMALS !!!\n        const flatTopOrthoNext = flatTopOrtho + 1; // k\n        if (flatTopOrthoNext % iS === (flatTopOrtho % iS) + 1) {\n            const ftopon = faces[2][flatTopOrthoNext];\n            if (\n                    normalP && ftopon < 0\n                    ||\n                    normalM && ftopon > 0 &&\n                    FaceLinker.linkCriterion(flatFaceId, flatFaceId+ijS, 0, 0, 1, ci, cj, ck, iS, ijS, capacity, blocks, neighbourBlocks)\n                )\n            {\n                const stackTopOrthoNext = 2 * capacity + flatTopOrthoNext;\n                if (CSFX.debugLinks) console.log(stackFaceId + ' i linked to next k ' + stackTopOrthoNext);\n                FaceLinker.affect(cc, stackTopOrthoNext, stackFaceId);\n            }\n        }\n\n        const flatBackOrthoNext = flatBackOrtho + 1; // j, POTENTIALLY MERGED\n        if (flatBackOrthoNext % iS === (flatBackOrtho % iS) + 1) {\n            const fbackon = faces[1][flatBackOrthoNext];\n            if (\n                    normalP && fbackon < 0\n                    ||\n                    normalM && fbackon > 0 &&\n                    FaceLinker.linkCriterion(flatFaceId, flatFaceId+iS, 0, 1, 0, ci, cj, ck, iS, ijS, capacity, blocks, neighbourBlocks)\n                )\n            {\n                const stackBackOrthoNext = capacity + flatBackOrthoNext;\n                if (CSFX.debugLinks) console.log(stackFaceId + ' i linked to next j ' + stackBackOrthoNext);\n                if (ec[stackBackOrthoNext] !== cc[stackBackOrthoNext] && cc[stackBackOrthoNext] !== cc[stackFaceId])\n                {\n                    if (CSFX.debugPostMerger) console.log('i, previous j: ' + cc[stackBackOrthoNext] + ',' + cc[stackFaceId]);\n                    merger.push([cc[stackBackOrthoNext], cc[stackFaceId]]);\n                }\n                FaceLinker.affect(cc, stackBackOrthoNext, stackFaceId);\n            }\n        }\n\n        // CASE 4: ortho with previous j on next i, regular orientation\n        const flatOrthoIJ = flatBackOrthoNext - iS;\n        if (flatOrthoIJ > 0 && flatOrthoIJ % iS === (flatBackOrtho - iS)%iS + 1) {\n            const foij = faces[1][flatOrthoIJ];\n            if (\n                    normalP && foij > 0\n                    ||\n                    normalM && foij < 0 &&\n                    FaceLinker.linkCriterion(flatFaceId, flatFaceId-iS, 0, -1, 0, ci, cj, ck, iS, ijS, capacity, blocks, neighbourBlocks)\n                )\n            {\n                const stackOrthoIJ = capacity + flatOrthoIJ;\n                if (CSFX.debugLinks) console.log(stackFaceId + ' i linked to previous j ' + stackOrthoIJ);\n                if (ec[stackOrthoIJ] !== cc[stackOrthoIJ] && cc[stackOrthoIJ] !== cc[stackFaceId])\n                {\n                    if (CSFX.debugPostMerger) console.log('i, previous j: ' + cc[stackOrthoIJ] + ',' + cc[stackFaceId]);\n                    merger.push([cc[stackOrthoIJ], cc[stackFaceId]]);\n                }\n                FaceLinker.affect(cc, stackOrthoIJ, stackFaceId);\n            }\n        }\n    }\n\n    static linkJ(flatFaceId, cc, ec, faces, merger, capacity, iS, ijS, blocks, neighbourBlocks, ci, cj, ck) {\n\n        // Lazy termination (prevent id calculations).\n        const val = faces[1][flatFaceId];\n        if (!val) {\n            console.log(\"WARN. j-* linker was given a faceId which is not present in faces array.\");\n            return;\n        }\n\n        const normalP = val > 0;\n        const normalM = val < 0;\n\n        const stackFaceId = capacity + flatFaceId;\n\n        // CASE 1: aligned with top and right j\n        const top = flatFaceId + ijS; // NOT MERGED YET\n        if (top < capacity) {\n            const ftop = faces[1][top];\n            if (\n                normalP && ftop > 0 ||\n                normalM && ftop < 0\n                )\n            {\n                const stackTop = capacity + top;\n                if (CSFX.debugLinks) console.log(stackFaceId + ' j linked to top j ' + stackTop);\n                FaceLinker.affect(cc, stackTop, stackFaceId);\n            }\n        }\n\n        const right = flatFaceId + 1; // POTENTIALLY MERGED\n        if (right % iS === (flatFaceId % iS) + 1) {\n            const fright = faces[1][right];\n            if (\n                normalP && fright > 0 ||\n                normalM && fright < 0\n                )\n            {\n                const stackRight = capacity + right;\n                if (CSFX.debugLinks) console.log(stackFaceId + ' j linked to back j ' + stackRight);\n                if (cc[stackRight] !== ec[stackRight] && cc[stackRight] !== cc[stackFaceId])\n                {\n                    if (CSFX.debugPostMerger) console.log('j, back j: ' + cc[stackRight] + ', ' + cc[stackFaceId]);\n                    merger.push([cc[stackRight], cc[stackFaceId]]);\n                }\n                FaceLinker.affect(cc, stackRight, stackFaceId);\n            }\n        }\n\n        // CASE 2: orthogonal with top (k)\n        const flatTopOrtho = flatFaceId; // k, obviously inbounds, POTENTIALLY MERGED\n        const ftopo = faces[2][flatTopOrtho];\n        if (\n                normalP && ftopo > 0 &&\n                FaceLinker.linkCriterion(flatFaceId, flatFaceId+iS+ijS, 0, 1, 1, ci, cj, ck, iS, ijS, capacity, blocks, neighbourBlocks)\n                ||\n                normalM && ftopo < 0\n            )\n        {\n            const stackTopOrtho = 2*capacity + flatFaceId;\n            if (CSFX.debugLinks) console.log(stackFaceId + ' j linked to current k ' + stackTopOrtho);\n            if (cc[stackTopOrtho] !== ec[stackTopOrtho] && cc[stackTopOrtho] !== cc[stackFaceId])\n            {\n                if (CSFX.debugPostMerger) console.log('j, current k ' + cc[stackTopOrtho] + ', ' + cc[stackFaceId]);\n                merger.push([cc[stackTopOrtho], cc[stackFaceId]]);\n            }\n            FaceLinker.affect(cc, stackTopOrtho, stackFaceId);\n        }\n\n        // CASE 3: orthogonal with next k or next i\n        // REVERSE ORIENTATION\n        const flatTopOrthoNext = flatTopOrtho + iS; // next k, NOT MERGED YET\n        if (flatTopOrthoNext % ijS === (flatTopOrtho % ijS) + iS) {\n            const ftopon = faces[2][flatTopOrthoNext];\n            if (\n                    normalP && ftopon < 0\n                    ||\n                    normalM && ftopon > 0 &&\n                    FaceLinker.linkCriterion(flatFaceId, flatFaceId+ijS, 0, 0, 1, ci, cj, ck, iS, ijS, capacity, blocks, neighbourBlocks)\n                )\n            {\n                const stackTopOrthoNext = 2*capacity + flatTopOrthoNext;\n                if (CSFX.debugLinks) console.log(stackFaceId + ' j linked to next k ' + stackTopOrthoNext);\n                FaceLinker.affect(cc, stackTopOrthoNext, stackFaceId);\n            }\n        }\n\n        const flatBackOrthoNext = flatFaceId + iS; // next i, POTENTIALLY MERGED\n        if (flatBackOrthoNext % ijS === (flatFaceId % ijS) + iS) {\n            const fbackon = faces[0][flatBackOrthoNext];\n            if (\n                    normalP && fbackon < 0\n                    ||\n                    normalM && fbackon > 0 &&\n                    FaceLinker.linkCriterion(flatFaceId, flatFaceId+1, 1, 0, 0, ci, cj, ck, iS, ijS, capacity, blocks, neighbourBlocks)\n                )\n            {\n                const stackBackOrthoNext = flatFaceId + iS;\n                if (CSFX.debugLinks) console.log(stackFaceId + ' j linked to next i ' + stackBackOrthoNext);\n                if (cc[stackBackOrthoNext] !== ec[stackBackOrthoNext] && cc[stackBackOrthoNext] !== cc[stackFaceId])\n                {\n                    if (CSFX.debugPostMerger) console.log('j, current k ' + cc[stackBackOrthoNext] + ', ' + cc[stackFaceId]);\n                    merger.push([cc[stackBackOrthoNext], cc[stackFaceId]]);\n                }\n                FaceLinker.affect(cc, stackBackOrthoNext, stackFaceId);\n            }\n        }\n    }\n\n    static linkK(flatFaceId, cc, ec, faces, merger, capacity, iS, ijS, blocks, neighbourBlocks, ci, cj, ck) {\n\n        // Lazy termination (prevent id calculations).\n        const val = faces[2][flatFaceId];\n        if (!val) {\n            console.log(\"WARN. k-* linker was given a faceId which is not present in faces array.\");\n            console.log('\\tface id: ' + flatFaceId);\n            console.log('\\tvalue: ' + val);\n            return;\n        }\n\n        const normalP = val > 0;\n        const normalM = val < 0;\n\n        const stackFaceId = 2 * capacity + flatFaceId;\n\n        // CASE 1: aligned with back and right k\n        const right = flatFaceId + 1; // right k\n        if (right % iS === (flatFaceId % iS) + 1) { // is it inbounds?\n            const fright = faces[2][right];\n            if (\n                normalP && fright > 0 ||\n                normalM && fright < 0\n                )\n            {\n                const stackRight = 2 * capacity + right;\n                if (CSFX.debugLinks) console.log(stackFaceId + ' k linked to right k ' + stackRight);\n                if (cc[stackRight] !== ec[stackRight] && cc[stackRight] !== cc[stackFaceId])\n                {\n                    if (CSFX.debugPostMerger) console.log('k, right k: ' + cc[stackRight] + ', ' + cc[stackFaceId]);\n                    merger.push([cc[stackRight], cc[stackFaceId]]);\n                }\n                FaceLinker.affect(cc, stackRight, stackFaceId);\n            }\n        }\n\n        const back = flatFaceId + iS; // back k\n        if (back % ijS === (flatFaceId % ijS) + iS) {\n            const fback = faces[2][back];\n            if (\n                normalP && fback > 0 ||\n                normalM && fback < 0\n                )\n            {\n                const stackBack = 2 * capacity + back;\n                if (CSFX.debugLinks) console.log(stackFaceId + ' k linked to back k ' + stackBack);\n                if (cc[stackBack] !== ec[stackBack] && cc[stackBack] !== cc[stackFaceId])\n                {\n                    if (CSFX.debugPostMerger) console.log('k, back k: ' + cc[stackBack] + ', ' + cc[stackFaceId]);\n                    merger.push([cc[stackBack], cc[stackFaceId]]);\n                }\n                FaceLinker.affect(cc, stackBack, stackFaceId);\n            }\n        }\n\n        // CASE 2: orthogonal with (upper current and previous) back and right (j, i)\n        // Current -> reverse orientation\n        const flatBackOrthoCurrent = flatFaceId + ijS; // j\n        if (flatBackOrthoCurrent < capacity) {\n            const fbackoc = faces[1][flatBackOrthoCurrent];\n            if (\n                    normalP && fbackoc < 0\n                    ||\n                    normalM && fbackoc > 0 &&\n                    FaceLinker.linkCriterion(flatFaceId, flatFaceId+iS, 0, 1, 0, ci, cj, ck, iS, ijS, capacity, blocks, neighbourBlocks)\n                )\n            {\n                const stackBackOrtho = capacity + flatBackOrthoCurrent;\n                if (CSFX.debugLinks) console.log(stackFaceId + ' k linked to current j ' + stackBackOrtho);\n                if (cc[stackBackOrtho] !== ec[stackBackOrtho] && cc[stackBackOrtho] !== cc[stackFaceId])\n                {\n                    if (CSFX.debugPostMerger) console.log('k, current j: ' + cc[stackBackOrtho] + ', ' +cc[stackFaceId]);\n                    merger.push([cc[stackBackOrtho], cc[stackFaceId]]);\n                }\n                FaceLinker.affect(cc, stackBackOrtho, stackFaceId);\n            }\n        }\n\n        const flatRightOrthoCurrent = flatFaceId + ijS; // i\n        if (flatRightOrthoCurrent < capacity) {\n            const frightoc = faces[0][flatRightOrthoCurrent];\n            if (\n                    normalP && frightoc < 0\n                    ||\n                    normalM && frightoc > 0 &&\n                    FaceLinker.linkCriterion(flatFaceId, flatFaceId+1, 1, 0, 0, ci, cj, ck, iS, ijS, capacity, blocks, neighbourBlocks)\n                )\n            {\n                const stackRightOrthoCurrent = flatRightOrthoCurrent;\n                if (CSFX.debugLinks) console.log(stackFaceId + ' k linked to current i ' + stackRightOrthoCurrent);\n                if (cc[stackRightOrthoCurrent] !== ec[stackRightOrthoCurrent] && cc[stackRightOrthoCurrent]!== cc[stackFaceId])\n                {\n                    if (CSFX.debugPostMerger) console.log('k, current i: ' + cc[stackRightOrthoCurrent] + ', ' +cc[stackFaceId]);\n                    merger.push([cc[stackRightOrthoCurrent], cc[stackFaceId]]);\n                }\n                FaceLinker.affect(cc, stackRightOrthoCurrent, stackFaceId);\n            }\n        }\n\n        // Previous -> regular orientation\n        const flatBackOrthoPrevious = flatBackOrthoCurrent - iS; // j\n        if (flatBackOrthoPrevious < capacity && (flatBackOrthoPrevious % ijS === (flatBackOrthoCurrent % ijS) - iS)) {\n            const fbackop = faces[1][flatBackOrthoPrevious];\n            if (\n                    normalP && fbackop > 0\n                    ||\n                    normalM && fbackop < 0 &&\n                    FaceLinker.linkCriterion(flatFaceId, flatFaceId-iS, 0, -1, 0, ci, cj, ck, iS, ijS, capacity, blocks, neighbourBlocks)\n                )\n            {\n                const stackBackOrthoPrevious = capacity + flatBackOrthoPrevious;\n                if (CSFX.debugLinks) console.log(stackFaceId + ' k linked to previous j ' + stackBackOrthoPrevious);\n                if (cc[stackBackOrthoPrevious] !== ec[stackBackOrthoPrevious] && cc[stackBackOrthoPrevious] !== cc[stackFaceId])\n                {\n                    if (CSFX.debugPostMerger) console.log('k, previous j: ' + cc[stackBackOrthoPrevious] + ', ' + cc[stackFaceId]);\n                    merger.push([cc[stackBackOrthoPrevious], cc[stackFaceId]]);\n                }\n                FaceLinker.affect(cc, stackBackOrthoPrevious, stackFaceId);\n            }\n        }\n\n        const flatRightOrthoPrevious = flatRightOrthoCurrent - 1; // i\n        if (flatRightOrthoPrevious < capacity && (flatRightOrthoPrevious % iS === (flatRightOrthoCurrent % iS) - 1)) {\n            const frightop = faces[0][flatRightOrthoPrevious];\n            if (\n                normalP && frightop > 0\n                ||\n                normalM && frightop < 0 &&\n                FaceLinker.linkCriterion(flatFaceId, flatFaceId-1, -1, 0, 0, ci, cj, ck, iS, ijS, capacity, blocks, neighbourBlocks)\n            )\n            {\n                const stackRightOrthoPrevious = flatRightOrthoPrevious;\n                if (CSFX.debugLinks) console.log(stackFaceId + ' k linked to previous i ' + stackRightOrthoPrevious);\n                if (cc[stackRightOrthoPrevious] !== ec[stackRightOrthoPrevious] && cc[stackRightOrthoPrevious] !== cc[stackFaceId])\n                {\n                    if (CSFX.debugPostMerger) console.log('k, previous i: ' + cc[stackRightOrthoPrevious] + ', ' + cc[stackFaceId]);\n                    merger.push([cc[stackRightOrthoPrevious], cc[stackFaceId]]);\n                }\n                FaceLinker.affect(cc, stackRightOrthoPrevious, stackFaceId);\n            }\n        }\n    }\n    \n}\n\nexport default FaceLinker;\n"]}