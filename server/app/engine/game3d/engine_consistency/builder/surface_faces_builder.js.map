{"version":3,"sources":["../../../../../../../server/app/engine/game3d/engine_consistency/builder/surface_faces_builder.js"],"names":[],"mappings":"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","file":"surface_faces_builder.js","sourcesContent":["/**\n *\n */\n\n'use strict';\n\nimport ChunkBuilder from './builder_chunks';\nimport FaceLinker   from './surface_faces_linker';\n\nclass CSFX {\n\n    static forceOneComponentPerChunk = true; // Lazy, inefficient in terms of i/o\n\n    static debug = false;\n    static debugIJKRecursion = false;\n    static debugLinks = false;\n    static debugFastCC = false;\n    static debugPostMerger = false;\n\n    static inbounds(d, b, iS, ijS, capacity) {\n        switch (d) {\n            case 0: return (b-1) % iS === b%iS-1; // iM\n            case 1: return (b-iS) % ijS === b%ijS-iS; // jM\n            case 2: return (b-ijS) >= 0; // kM\n            case 3: return (b+1) % iS !== 0; // iP\n            case 4: return (b+iS-(b%iS)) % ijS !== 0; // jP\n            case 5: return b+ijS < capacity; // kP\n            default: return false;\n        }\n    }\n\n    static empty(d, b, bs, iS, ijS) {\n        switch (d) {\n            case 0: return bs[b-1] === 0; // iM\n            case 1: return bs[(b-iS)] === 0; // jM\n            case 2: return bs[b-ijS] === 0; // kM\n            case 3: return bs[b+1] === 0; // iP\n            case 4: return bs[b+iS] === 0; // jP\n            case 5: return bs[b+ijS] === 0; // kP\n            default: return false;\n        }\n    }\n\n    static setFace(direction, bid, blockNature, faces,\n                   surfaceFaces, encounteredFaces, connectedComponents,\n                   capacity, iS, ijS, ccid, dontTranslate)\n    {\n        let blockId = bid;\n        if (!dontTranslate) { // Boundary faces with reverted normals.\n            switch (direction) {\n                case 0: blockId -= 1; break;\n                case 1: blockId -= iS; break;\n                case 2: blockId -= ijS; break;\n                default:\n            }\n        }\n\n        // Set surface face\n        const d = direction % 3;\n        if (d in surfaceFaces) surfaceFaces[d].push(blockId);\n        else surfaceFaces[d] = [blockId];\n\n        // Set faces\n        const factor = direction < 3 ? -1 : 1; // Face normal (-1 => towards minus)\n        faces[d][blockId] = factor * blockNature; // Face nature\n\n        // Set connected component\n        const faceId = d * capacity + blockId;\n        encounteredFaces[faceId] = ccid;\n        connectedComponents[faceId] = ccid;\n    }\n\n    static extractRawFaces(blocks, neighbourBlocks, surfaceBlocks, faces, surfaceFaces, encounteredFaces,\n                           connectedComponents, dims)\n    {\n        let ccid = 1;\n\n        const iS = dims[0];\n        const jS = dims[1];\n        const kS = dims[2];\n\n        const ijS = iS*jS;\n        const capacity = ijS*kS;\n\n        let nbX = neighbourBlocks[0]; // On x+ boundary.\n        let nbY = neighbourBlocks[2]; // On y+ boundary.\n        let nbZ = neighbourBlocks[4]; // On z+ boundary.\n\n        // Extract faces.\n        for (let z in surfaceBlocks) {\n\n            let layer = surfaceBlocks[z];\n            for (let b = 0, length = layer.length; b < length; ++b) {\n                let offset = z*ijS;\n                let idOnCurrentLayer = layer[b];\n\n                let blockId = idOnCurrentLayer + offset;\n                const block = blocks[blockId];\n\n                for (let direction = 0; direction < 6; ++direction) {\n                    if (CSFX.inbounds(direction, blockId, iS, ijS, capacity)) {\n                        if (block !== 0 && CSFX.empty(direction, blockId, blocks, iS, ijS)) {\n                            CSFX.setFace(direction, blockId, block, faces, surfaceFaces,\n                                encounteredFaces, connectedComponents, capacity, iS, ijS, ccid);\n                            ccid++;\n                        }\n                    } else {\n                        if (direction >= 3) { // x+, y+, z+\n                            if (direction === 3) {\n                                const xblock = nbX[blockId-iS+1];\n                                if (block !== 0 && xblock === 0) { // i+\n                                    CSFX.setFace(3, blockId, block, faces, surfaceFaces,\n                                        encounteredFaces, connectedComponents, capacity, iS, ijS, ccid);\n                                    ccid++;\n                                }\n                                else if (block === 0 && xblock !== 0 && xblock !== undefined) { // i+\n                                    CSFX.setFace(0, blockId, xblock, faces, surfaceFaces,\n                                        encounteredFaces, connectedComponents, capacity, iS, ijS, ccid, true);\n                                    ccid++;\n                                }\n\n                            }\n                            if (direction === 4) { // j+\n                                const yblock = nbY[blockId-ijS+iS];\n                                if (block !== 0 && yblock === 0) {\n                                    CSFX.setFace(4, blockId, block, faces, surfaceFaces,\n                                        encounteredFaces, connectedComponents, capacity, iS, ijS, ccid);\n                                    ccid++;\n                                }\n                                else if (block === 0 && yblock !== 0 && yblock !== undefined) {\n                                    CSFX.setFace(1, blockId, yblock, faces, surfaceFaces,\n                                        encounteredFaces, connectedComponents, capacity, iS, ijS, ccid, true);\n                                    ccid++;\n                                }\n                            }\n                            // TODO [HIGH] check z\n                            if (direction === 5) { // k+\n                                const zblock = nbZ[blockId-capacity+ijS];\n                                if (block !== 0 && zblock === 0) {\n                                    CSFX.setFace(5, blockId, block, faces, surfaceFaces,\n                                        encounteredFaces, connectedComponents, capacity, iS, ijS, ccid);\n                                    ccid++;\n                                }\n                                else if (block === 0 && zblock !== 0 && zblock !== undefined) { // TODO [LOW] properly manage loading\n                                    CSFX.setFace(2, blockId, zblock, faces, surfaceFaces,\n                                        encounteredFaces, connectedComponents, capacity, iS, ijS, ccid, true);\n                                    ccid++;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n        }\n\n        if (CSFX.debug) {\n            console.log(\"Surface block layers \" + Object.keys(surfaceBlocks).length + \", surface faces: (\" +\n                surfaceFaces[0].length + ',' + surfaceFaces[1].length + ',' + surfaceFaces[2].length+')');\n            //faces\n        }\n    }\n\n    static preMerge(surfaceFaces, connectedComponents, encounteredFaces, faces, merger, capacity, iS, ijS, blocks, neighbourBlocks, chunk) {\n\n        const ci = chunk.chunkI;\n        const cj = chunk.chunkJ;\n        const ck = chunk.chunkK;\n\n        let ayes = surfaceFaces['0'];\n        let jays = surfaceFaces['1'];\n        let kays = surfaceFaces['2'];\n\n        let ayesLength = ayes.length;\n        let jaysLength = jays.length;\n        let kaysLength = kays.length;\n\n        let ayeCurrent = 0;\n        let jayCurrent = 0;\n        let kayCurrent = 0;\n\n        ayes.sort(function(a, b) {return a-b});\n        jays.sort(function(a, b) {return a-b});\n        kays.sort(function(a, b) {return a-b});\n\n        if (CSFX.debugIJKRecursion) {\n            console.log(ayesLength + \" is\");\n            console.log(jaysLength + \" js\");\n            console.log(kaysLength + \" ks\");\n        }\n        //console.log(kays);\n\n        let currentBlock = capacity;\n        if (ayesLength > 0) currentBlock = ayes[ayeCurrent];\n        if (jaysLength > 0) currentBlock = Math.min(currentBlock, jays[jayCurrent]);\n        if (kaysLength > 0) currentBlock = Math.min(currentBlock, kays[kayCurrent]);\n\n        while ((ayeCurrent<ayesLength || jayCurrent<jaysLength || kayCurrent<kaysLength) && currentBlock<capacity) {\n\n            if (ayes[ayeCurrent] === currentBlock) {\n                if (CSFX.debugIJKRecursion) console.log('i ' + ayeCurrent + ' ' + ayes[ayeCurrent]);\n                FaceLinker.linkI(ayes[ayeCurrent], connectedComponents, encounteredFaces, faces,\n                    merger, capacity, iS, ijS, blocks, neighbourBlocks, ci, cj, ck);\n                ayeCurrent++;\n            }\n\n            if (jays[jayCurrent] === currentBlock){\n                if (CSFX.debugIJKRecursion) console.log('j ' + jayCurrent + ' ' + jays[jayCurrent]);\n                FaceLinker.linkJ(jays[jayCurrent], connectedComponents, encounteredFaces, faces,\n                    merger, capacity, iS, ijS, blocks, neighbourBlocks, ci, cj, ck);\n                jayCurrent++;\n            }\n\n            if (kays[kayCurrent] === currentBlock) {\n                if (CSFX.debugIJKRecursion) console.log('k ' + kayCurrent + ' ' + kays[kayCurrent]);\n                FaceLinker.linkK(kays[kayCurrent], connectedComponents, encounteredFaces, faces,\n                    merger, capacity, iS, ijS, blocks, neighbourBlocks, ci, cj, ck);\n                kayCurrent++;\n            }\n\n            ++currentBlock;\n        }\n\n        if (kayCurrent !== kaysLength) console.log(\"WARN. kays not recursed: \" + kayCurrent + \" out of \" + kaysLength);\n        if (jayCurrent !== jaysLength) console.log(\"WARN. jays not recursed: \" + jayCurrent + \" out of \" + jaysLength);\n        if (ayeCurrent !== ayesLength) console.log(\"WARN. ayes not recursed: \" + ayeCurrent + \" out of \" + ayesLength);\n\n        if (CSFX.debug) console.log('PreMerge successufl! PreMerger state:');\n        if (CSFX.debug) console.log(merger);\n    }\n\n    static precomputeFastConnectedComponents(connectedComponents, fastCC) {\n        for (let i = 0, length = connectedComponents.length; i < length; ++i) {\n            if (connectedComponents[i] === 0) continue;\n            if (!fastCC.hasOwnProperty(connectedComponents[i]))\n                fastCC[connectedComponents[i]] = [i];\n            else fastCC[connectedComponents[i]].push(i);\n        }\n    }\n\n    static postMerge(merger, fastCC, connectedComponents) {\n        function mergeArrays(a, b) {\n            var result = a;\n            for (let i = 0; i<b.length; ++i) {\n                if (a.indexOf(b[i]) < 0) a.push(b[i]);\n            }\n            return result;\n        }\n\n        var fastMerger = [];\n        if (merger.length > 0) fastMerger.push([merger[0][0], merger[0][1]]);\n        for (let c = 1; c < merger.length; ++c) {\n            let min = Math.min(merger[c][0], merger[c][1]);\n            let max = Math.max(merger[c][0], merger[c][1]);\n\n            let minFound = -1;\n            let maxFound = -1;\n            for (let d = 0; d < fastMerger.length; ++d) {\n                if (fastMerger[d].indexOf(min) >= 0) minFound = d;\n                if (fastMerger[d].indexOf(max) >= 0) maxFound = d;\n                if (minFound !== -1 && maxFound !== -1) break;\n            }\n\n            // Merge arrays\n            if (minFound >= 0 && maxFound >= 0 && minFound !== maxFound) {\n                fastMerger[minFound] = mergeArrays(fastMerger[minFound], fastMerger[maxFound]);\n                fastMerger.splice(maxFound, 1);\n            }\n            else if (minFound >= 0 && maxFound < 0) {\n                if (fastMerger[minFound].indexOf(max) < 0) fastMerger[minFound].push(max);\n            }\n            else if (maxFound >= 0 && minFound < 0) {\n                if (fastMerger[maxFound].indexOf(min) < 0) fastMerger[maxFound].push(min);\n            }\n            else if (minFound < 0 && maxFound < 0) {\n                fastMerger.push([min, max]);\n            }\n        }\n\n        if (CSFX.debug) console.log('PostMerger initialized... PostMerger state:');\n        if (CSFX.debug) console.log(fastMerger);\n\n        if (CSFX.debugPostMerger) console.log(\"Merger:\");\n        if (CSFX.debugPostMerger) console.log(merger);\n        if (CSFX.debugPostMerger) console.log(\"Fast merger:\");\n        if (CSFX.debugPostMerger) console.log(fastMerger);\n        if (CSFX.debugPostMerger) console.log(\"Initial components:\");\n        if (CSFX.debugPostMerger) console.log(Object.keys(fastCC));\n\n        if (CSFX.forceOneComponentPerChunk) {\n            fastMerger = [[]];\n            let ks = Object.keys(fastCC);\n            for (let i = 0; i<ks.length; ++i) {\n                fastMerger[0].push(parseInt(ks[i]));\n            }\n        }\n\n        for (let k = 0, fmLength = fastMerger.length; k < fmLength; ++k) {\n            fastMerger[k].sort(function(a, b) {return a-b});\n            let id = fastMerger[k][0];\n            if (!fastCC.hasOwnProperty(id)) {\n                console.log('PostMerger failed because of id inconsistency: ' + id);\n                continue;\n            }\n            let componentsToMerge = fastMerger[k];\n\n            if (CSFX.debug) console.log('Merging ' +componentsToMerge.length+ ' component(s) ' + ' to ' + id +':');\n            if (CSFX.debug) console.log(componentsToMerge);\n\n            for (let i = 1, ctmLength = componentsToMerge.length; i < ctmLength; ++i) {\n                let toMerge = componentsToMerge[i];\n                if (CSFX.debug) console.log('\\t'+toMerge);\n                if (!fastCC.hasOwnProperty(toMerge)) {\n                    if (CSFX.debugPostMerger) console.log('WARN. ' +\n                        'PostMerger failed during sub-merge because of id inconsistency: ' + toMerge);\n                    continue;\n                }\n                let ccToMerge = fastCC[toMerge];\n                // if (CSFX.debug) console.log(ccToMerge);\n\n                // Merge: update connected components\n                for (let j = 0, cctmLength = ccToMerge.length; j < cctmLength; ++j)\n                    connectedComponents[ccToMerge[j]] = id;\n\n                // Merge: update fast components\n                for (let j = 0, cctmLength = ccToMerge.length; j < cctmLength; ++j)\n                    fastCC[id].push(ccToMerge[j]);\n\n                delete fastCC[toMerge];\n            }\n        }\n\n        if (CSFX.debugPostMerger) console.log(\"Final components:\");\n        if (CSFX.debugPostMerger) console.log(Object.keys(fastCC));\n    }\n\n    static computeFastConnectedComponentIds(fastCC, fastCCIds, capacity, faces) {\n        for (let cccid in fastCC) {\n            fastCCIds[cccid] = [];\n            let tcur = fastCCIds[cccid];\n            let fcc = fastCC[cccid];\n            for (let i in fcc) {\n                let j = fcc[i];\n                let orientation = j < capacity ? 0 : j < 2 * capacity ? 1 : 2;\n                let realId = j % capacity;\n                tcur.push(faces[orientation][realId]);\n            }\n        }\n    }\n\n    static getNeighbourChunks(neighbourChunks, chunk, neighbourBlocks) {\n        //neighbourChunks.push();\n        for (let i = 0; i < 17; ++i) {\n            neighbourChunks.push(ChunkBuilder.getNeighboringChunk(chunk, i));\n            neighbourBlocks.push(neighbourChunks[i].blocks);\n        }\n    }\n\n    static extractConnectedComponents(chunk) {\n        let neighbourChunks = [];\n        let neighbourBlocks = [];\n\n        // Get all six neighbour chunks.\n        CSFX.getNeighbourChunks(neighbourChunks, chunk, neighbourBlocks);\n\n        // Properties\n        let surfaceBlocks = chunk.surfaceBlocks;\n        let blocks = chunk.blocks;\n\n        // Static properties\n        const dims = chunk.dimensions;\n        const iS = chunk.dimensions[0];\n        const ijS = chunk.dimensions[0] * chunk.dimensions[1];\n        const capacity = blocks.length;\n\n        // Temporary variables\n        var surfaceFaces = {'0':[],'1':[],'2':[]};\n        var faces = [new Int32Array(capacity), new Int32Array(capacity), new Int32Array(capacity)];\n        var encounteredFaces = new Uint16Array(3 * capacity); // initializes all to 0\n\n        // Results\n        var connectedComponents = new Uint16Array(3 * capacity); // ditto\n        var fastCC = {};\n        var fastCCIds = {};\n\n        // Compute raw faces.\n        CSFX.extractRawFaces(blocks, neighbourBlocks, surfaceBlocks, faces, surfaceFaces, encounteredFaces, connectedComponents, dims);\n\n        // Post merger.\n        let merger = [];\n\n        // Triple PreMerge.\n        CSFX.preMerge(surfaceFaces, connectedComponents, encounteredFaces, faces, merger, capacity, iS, ijS, blocks, neighbourBlocks, chunk);\n\n        // Compute fast connected components.\n        CSFX.precomputeFastConnectedComponents(connectedComponents, fastCC);\n        //console.log(fastCC);\n\n        // PostMerge.\n        CSFX.postMerge(merger, fastCC, connectedComponents);\n        //console.log(merger);\n        //for (let i in connectedComponents) {\n        //    if (connectedComponents[i] != 0) console.log('\\t' + i + ' | ' + connectedComponents[i]);\n        //}\n\n        // Debugging fastCC\n        for (let i in fastCC) {\n            for (let faceId = 0; faceId < fastCC[i].length; ++faceId) {\n\n                if (fastCC[i].indexOf(fastCC[i][faceId]) !== faceId)\n                    console.log(\"Detected duplicate face.\");\n\n                let dir = fastCC[i][faceId]<capacity ? 0 : fastCC[i][faceId]<2*capacity ? 1 : 2;\n\n                if (CSFX.debugFastCC) if (faces[dir][fastCC[i][faceId] % capacity] == 0)\n                    console.log(\"Face \" + fastCC[i][faceId] + \" null: \"\n                    + faces[dir][fastCC[i][faceId] % capacity]);\n            }\n        }\n\n        // Induce Ids.\n        CSFX.computeFastConnectedComponentIds(fastCC, fastCCIds, capacity, faces);\n\n        // Assign\n        chunk.fastComponents = fastCC;\n        chunk.fastComponentsIds = fastCCIds;\n        chunk.connectedComponents = connectedComponents;\n\n        if (CSFX.debugFastCC) {\n            //console.log(fastCC);\n            //console.log(fastCCIds);\n        }\n        if (CSFX.debug) console.log(Object.keys(fastCC).length + \" connected components extracted...\");\n    }\n\n}\n\nexport default CSFX;\n"]}