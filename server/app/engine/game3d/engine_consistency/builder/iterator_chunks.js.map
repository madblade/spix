{"version":3,"sources":["../../../../../../../server/app/engine/game3d/engine_consistency/builder/iterator_chunks.js"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;;;;;IAEM;;;;;;;;;;;;;;;;;;4BAWS,OAAO,cAAc,UAAU,8BAA8B;AACpE,gBAAI,QAAQ,EAAR,CADgE;AAEpE,gBAAI,UAAU,EAAV,CAFgE;;AAIpE,kBAAM,IAAN,CAAW,YAAX,EAJoE;AAKpE,mBAAO,CAAC,MAAM,KAAN,EAAD,EAAgB;;AAEnB,oBAAI,UAAU,MAAM,GAAN,EAAV,CAFe;AAGnB,wBAAQ,IAAR,CAAa,OAAb;;;AAHmB,oBAMf,SAAS,SAAS,OAAT,EAAkB,KAAlB,EAAyB,4BAAzB,CAAT;;;;AANe,oBAUf,CAAC,MAAD,EACJ;AACI,2BADJ;iBADA;;AAKA,oBAAI,aAAa,cAAc,eAAd,CAA8B,OAA9B,EAAuC,KAAvC,CAAb,CAfe;AAgBnB,qBAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,WAAW,MAAX,EAAmB,IAAI,CAAJ,EAAO,EAAE,CAAF,EAAK;;AAE/C,wBAAI,YAAY,WAAW,CAAX,CAAZ,CAF2C;AAG/C,wBAAI,QAAQ,OAAR,CAAgB,SAAhB,IAA6B,CAA7B,EAAgC;;AAEhC,gCAAQ,IAAR,CAAa,SAAb,EAFgC;AAGhC,8BAAM,IAAN,CAAW,SAAX,EAHgC;qBAApC;iBAHJ;aAhBJ;;;;wCA4BmB,cAAc,OAAO;AACxC,gBAAM,IAAI,aAAa,MAAb,CAD8B;AAExC,gBAAM,IAAI,aAAa,MAAb,CAF8B;AAGxC,gBAAM,IAAI,aAAa,MAAb,CAH8B;AAIxC,gBAAI,SAAS,MAAM,SAAN,CAJ2B;;AAMxC,gBAAI,oBAAoB,CACpB,CAAC,GAAE,CAAF,GAAQ,GAAT,GAAa,CAAb,GAAqB,GAArB,GAAyB,CAAzB,EACA,CAAC,GAAE,CAAF,GAAQ,GAAT,IAAc,IAAE,CAAF,CAAd,GAAqB,GAArB,GAAyB,CAAzB,EACA,IAAS,GAAT,IAAc,IAAE,CAAF,CAAd,GAAqB,GAArB,GAAyB,CAAzB,EACA,CAAC,GAAE,CAAF,GAAQ,GAAT,IAAc,IAAE,CAAF,CAAd,GAAqB,GAArB,GAAyB,CAAzB,EACA,CAAC,GAAE,CAAF,GAAQ,GAAT,GAAa,CAAb,GAAqB,GAArB,GAAyB,CAAzB,EACA,CAAC,GAAE,CAAF,GAAQ,GAAT,IAAc,IAAE,CAAF,CAAd,GAAqB,GAArB,GAAyB,CAAzB,EACA,IAAS,GAAT,IAAc,IAAE,CAAF,CAAd,GAAqB,GAArB,GAAyB,CAAzB,CAPA,CANoC;;AAgBxC,gBAAI,aAAa,EAAb,CAhBoC;;AAkBxC,iBAAK,IAAI,KAAK,CAAL,EAAQ,SAAS,kBAAkB,MAAlB,EAA0B,KAAK,MAAL,EAAa,EAAE,EAAF,EAAM;AACnE,oBAAI,UAAU,kBAAkB,EAAlB,CAAV,CAD+D;AAEnE,oBAAI,QAAQ,OAAO,GAAP,CAAW,OAAX,CAAR,CAF+D;AAGnE,oBAAI,CAAC,KAAD,EAAQ,QAAQ,GAAR,CAAY,qBAAqB,OAArB,GAA+B,aAA/B,CAAZ,CAAZ,KACK,WAAW,IAAX,CAAgB,KAAhB,EADL;aAHJ;;;;;;;;;;;;;AAlBwC,mBAsCjC,UAAP,CAtCwC;;;;wCAyCrB,cAAc;AACjC,gBAAI,aAAa,EAAb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAD6B;WArFnC;;;kBAwHS","file":"iterator_chunks.js","sourcesContent":["/**\n *\n */\n\n'use strict';\n\nclass ChunkIterator {\n\n    /**\n     *\n     * @param world\n     * @param starterChunk\n     * @param callback\n     *      Callback must return FALSE for early termination\n     * @param callbackAdditionalParameters\n     * @constructor\n     */\n    static BFS(world, starterChunk, callback, callbackAdditionalParameters) {\n        let queue = [];\n        let markers = [];\n\n        queue.push(starterChunk);\n        while (!queue.empty()) {\n\n            let current = queue.pop();\n            markers.push(current);\n\n            // Make your dreams come true\n            let status = callback(current, world, callbackAdditionalParameters);\n\n            // Hard-cut when a chunk is to be loaded (client)\n            // WARN! Don't cut server side!!!\n            if (!status)\n            {\n                return;\n            }\n\n            let neighbours = ChunkIterator.get2DNeighbours(current, world);\n            for (let i = 0, l = neighbours.length; i < l; ++i) {\n\n                let neighbour = neighbours[i];\n                if (markers.indexOf(neighbour) < 0) {\n\n                    markers.push(neighbour);\n                    queue.push(neighbour);\n                }\n            }\n        }\n    }\n\n    static get2DNeighbours(currentChunk, world) {\n        const i = currentChunk.chunkI;\n        const j = currentChunk.chunkJ;\n        const k = currentChunk.chunkK;\n        let chunks = world.allChunks;\n\n        let neighboursIndices = [\n            (i+1)   +','+j      +','+k,\n            (i+1)   +','+(j+1)  +','+k,\n            i       +','+(j+1)  +','+k,\n            (i-1)   +','+(j+1)  +','+k,\n            (i-1)   +','+j      +','+k,\n            (i-1)   +','+(j-1)  +','+k,\n            i       +','+(j-1)  +','+k\n        ];\n\n        let neighbours = [];\n\n        for (let id = 0, length = neighboursIndices.length; id < length; ++id) {\n            let chunkId = neighboursIndices[id];\n            let chunk = chunks.get(chunkId);\n            if (!chunk) console.log('Iterator: chunk ' + chunkId + ' undefined.');\n            else neighbours.push(chunk);\n        }\n\n        /*\n\n            i \tj\tk <- starter\n            i+1\tj\tk\n            i+1\tj+1\tk\n            i\tj+1\tk\n            i-1\tj+1\tk\n            i-1\tj\tk\n            i-1\tj-1\tk\n            i\tj-1\tk\n\n        */\n\n        return neighbours;\n    }\n\n    static get3DNeighbours(currentChunk) {\n        let neighbours = [];\n\n        /*\n            i\tj\tk <- starter\n            i \tj\tk+1\n            i+1\tj\tk+1\n            i+1\tj+1\tk+1\n            i\tj+1\tk+1\n            i-1\tj+1\tk+1\n            i-1\tj\tk+1\n            i-1\tj-1\tk+1\n            i\tj-1\tk+1\n            // Next layer, reverse order\n            i\tj-1\tk\n            i-1\tj-1\tk\n            i-1\tj\tk\n            i-1\tj+1\tk\n            i\tj+1\tk\n            i+1\tj+1\tk\n            i+1\tj\tk\n            // Last layer, reverse order again >_<\n            i+1\tj\tk-1\n            i+1\tj+1\tk-1\n            i\tj+1\tk-1\n            i-1\tj+1\tk-1\n            i-1\tj\tk-1\n            i-1\tj-1\tk-1\n            i\tj-1\tk-1\n            i \tj\tk-1\n        */\n\n    }\n}\n\nexport default ChunkIterator;\n"]}