{"version":3,"sources":["../../../../../../../server/app/engine/game3d/engine_consistency/builder/builder_chunks.js"],"names":[],"mappings":"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","file":"builder_chunks.js","sourcesContent":["/**\n *\n */\n\n'use strict';\n\nimport GeometryUtils        from '../../../math/geometry';\n\nimport ChunkGenerator       from './../generator/chunkgenerator';\nimport BlockExtractor       from './surface_blocks_builder';\nimport FaceExtractor        from './surface_faces_builder';\n\nclass ChunkBuilder {\n\n    static debug = false;\n\n    static computeChunkFaces(chunk) {\n        let world = chunk.world;\n\n        // Preload neighbours.\n        if (ChunkBuilder.debug) console.log('\\tPreloading neighbor chunks...');\n        ChunkBuilder.preloadAllNeighbourChunks(chunk, world);\n\n        // Detect boundary blocks.\n        if (ChunkBuilder.debug) console.log('\\tExtracting surface...');\n        BlockExtractor.extractSurfaceBlocks(chunk);\n\n        // Detect connected boundary face components.\n        if (ChunkBuilder.debug) console.log(\"\\tComputing connected components...\");\n        FaceExtractor.extractConnectedComponents(chunk);\n\n        chunk.ready = true;\n    }\n\n    /** MODEL\n     0\ti+1,\tj,\t\tk\n     1\ti-1,\tj,\t\tk\n     2\ti,\t\tj+1,\tk\n     3\ti,\t\tj-1,\tk\n     4\ti,\t\tj,\t\tk+1\n     5\ti,\t\tj,\t\tk-1\n     6\ti+1,\tj+1,\tk\n     7\ti-1,\tj+1,\tk\n     8\ti+1,\tj-1,\tk\n     9\ti-1,\tj-1,\tk\n     10\ti+1,\tj,\t\tk-1\n     11\ti+1,\tj,\t\tk+1\n     12\ti-1,\tj,\t\tk-1\n     13\ti-1,\tj,\t\tk+1\n     14\ti,\t\tj+1,\tk+1\n     15\ti,\t\tj-1,\tk+1\n     16\ti,\t\tj+1,\tk-1\n     17\ti,\t\tj-1,\tk-1\n    */\n    static getNeighboringChunk(chunk, direction) {\n        let i = chunk.chunkI;\n        let j = chunk.chunkJ;\n        let k = chunk.chunkK;\n        let world = chunk.world;\n\n        switch (direction) {\n            case 0: return world.getChunk(i+1, j, k);      // x+\n            case 1:  return world.getChunk(i-1, j, k);     // x-\n            case 2:  return world.getChunk(i, j+1, k);     // y+\n            case 3:  return world.getChunk(i, j-1, k);     // y-\n            case 4:  return world.getChunk(i, j, k+1);     // z+\n            case 5:  return world.getChunk(i, j, k-1);     // z- (idem)\n            case 6:  return world.getChunk(i+1, j+1, k);\n            case 7:  return world.getChunk(i-1, j+1, k);\n            case 8:  return world.getChunk(i+1, j-1, k);\n            case 9:  return world.getChunk(i-1, j-1, k);\n            case 10: return world.getChunk(i+1, j, k-1);\n            case 11: return world.getChunk(i+1, j, k+1);\n            case 12: return world.getChunk(i-1, j, k-1);\n            case 13: return world.getChunk(i-1, j, k+1);\n            case 14: return world.getChunk(i, j+1, k+1);\n            case 15: return world.getChunk(i, j-1, k+1);\n            case 16: return world.getChunk(i, j+1, k-1);\n            case 17: return world.getChunk(i, j-1, k-1);\n\n            default:\n        }\n    }\n\n    static isNeighboringChunkLoaded(chunk, direction) {\n        let i = chunk.chunkI;\n        let j = chunk.chunkJ;\n        let k = chunk.chunkK;\n        let world = chunk.world;\n\n        switch (direction) {\n            case 0:  return world.hasChunk(i+1, j, k); // x+\n            case 1:  return world.hasChunk(i-1, j, k); // x-\n            case 2:  return world.hasChunk(i, j+1, k); // y+\n            case 3:  return world.hasChunk(i, j-1, k); // y-\n            case 4:  return world.hasChunk(i, j, k+1); // z+ (non-flat models)\n            case 5:  return world.hasChunk(i, j, k-1); // z-\n            case 6:  return world.hasChunk(i+1, j+1, k);\n            case 7:  return world.hasChunk(i-1, j+1, k);\n            case 8:  return world.hasChunk(i+1, j-1, k);\n            case 9:  return world.hasChunk(i-1, j-1, k);\n            case 10: return world.hasChunk(i+1, j, k-1);\n            case 11: return world.hasChunk(i+1, j, k+1);\n            case 12: return world.hasChunk(i-1, j, k-1);\n            case 13: return world.hasChunk(i-1, j, k+1);\n            case 14: return world.hasChunk(i, j+1, k+1);\n            case 15: return world.hasChunk(i, j-1, k+1);\n            case 16: return world.hasChunk(i, j+1, k-1);\n            case 17: return world.hasChunk(i, j-1, k-1);\n            default:\n        }\n    }\n\n    static preloadAllNeighbourChunks(chunk, world) {\n        let loadedChunks = world.allChunks;\n        let c = chunk;\n        let dims = c.dimensions;\n        let ci = c.chunkI, cj = c.chunkJ, ck = c.chunkK;\n\n        let neighbourIds = [\n            (ci+1)+','+cj+','+ck,           //  i+1,\tj,\t\tk\n            ci+','+(cj+1)+','+ck,           //  i-1,\tj,\t\tk\n            ci+','+cj+','+(ck+1),           //  i,\t\tj+1,\tk\n            (ci-1)+','+cj+','+ck,           //  i,\t\tj-1,\tk\n            ci+','+(cj-1)+','+ck,           //  i,\t\tj,\t\tk+1\n            ci+','+cj+','+(ck-1),           //  i,\t\tj,\t\tk-1\n            (ci+1)+','+(cj+1)+','+(ck),     //  i+1,\tj+1,\tk\n            (ci-1)+','+(cj+1)+','+(ck),     //  i-1,\tj+1,\tk\n            (ci+1)+','+(cj-1)+','+(ck),     //  i+1,\tj-1,\tk\n            (ci-1)+','+(cj-1)+','+(ck),     //  i-1,\tj-1,\tk\n            (ci+1)+','+(cj)+','+(ck-1),     //  i+1,\tj,\t\tk-1\n            (ci+1)+','+(cj)+','+(ck+1),     //  i+1,\tj,\t\tk+1\n            (ci-1)+','+(cj)+','+(ck-1),     //  i-1,\tj,\t\tk-1\n            (ci-1)+','+(cj)+','+(ck+1),     //  i-1,\tj,\t\tk+1\n            (ci)+','+(cj+1)+','+(ck+1),     //  i,\t\tj+1,\tk+1\n            (ci)+','+(cj-1)+','+(ck+1),     //  i,\t\tj-1,\tk+1\n            (ci)+','+(cj+1)+','+(ck-1),     //  i,\t\tj+1,\tk-1\n            (ci)+','+(cj-1)+','+(ck-1)      //  i,\t\tj-1,\tk-1\n        ];\n\n        for (let i = 0, length = neighbourIds.length; i < length; ++i) {\n            let currentId = neighbourIds[i];\n            if (loadedChunks.has(currentId)) continue;\n\n            // Don't compute faces\n            let neighbour = ChunkGenerator.createChunk(dims[0], dims[1], dims[2], currentId, world);\n            world.addChunk(currentId, neighbour);\n        }\n    }\n\n    static preloadFlatNeighbourChunks(chunk, world) {\n        let loadedChunks = world.allChunks;\n        let c = chunk;\n        let ci = c.chunkI;\n        let cj = c.chunkJ;\n        let ck = c.chunkK;\n        let dims = c.dimensions;\n\n        let neighbourIds = [\n            (ci+1)+','+cj+','+ck,\n            ci+','+(cj+1)+','+ck,\n            ci+','+cj+','+(ck+1),\n            (ci-1)+','+cj+','+ck,\n            ci+','+(cj-1)+','+ck,\n            ci+','+cj+','+(ck-1)\n        ];\n\n        for (let i = 0, length = neighbourIds.length; i < length; ++i) {\n            let currentId = neighbourIds[i];\n            if (loadedChunks.has(currentId)) continue;\n\n            // Don't compute faces\n            let neighbour = ChunkGenerator.createChunk(dims[0], dims[1], dims[2], currentId, world);\n            world.addChunk(currentId, neighbour);\n        }\n    }\n\n    static addChunk(dimX, dimY, dimZ, chunkId, world) {\n        // Do compute faces\n        let chunk = ChunkGenerator.createChunk(dimX, dimY, dimZ, chunkId, world);\n        world.addChunk(chunkId, chunk);\n        ChunkBuilder.computeChunkFaces(chunk);\n        return chunk;\n    }\n\n    static loadNextChunk(player, startWid, startCid, worldModel, xModel, consistencyModel, serverLoadingRadius, forPlayer) {\n\n        let avatar = player.avatar;\n        let threshold = forPlayer ? avatar.chunkRenderDistance : serverLoadingRadius;\n        threshold = Math.min(threshold, serverLoadingRadius);\n\n        let connectivity = xModel.getConnectivity(startWid, startCid, worldModel, threshold, true, !forPlayer);\n        if (!connectivity) return;\n        let chunks = connectivity[1]; // !! Should be sorted from the nearest to the farthest.\n        if (!chunks) return;\n        let aid = avatar.id;\n\n        let hasLoadedChunk = (wid, ic, jc, kc) => consistencyModel.hasChunk(aid, wid, (ic+','+jc+','+kc));\n\n        for (let id = 0, l = chunks.length; id < l; ++id) {\n            let current = chunks[id];\n\n            let wid = current[0];\n            let currentId = current[1];\n            let ijk = currentId.split(',');\n            if (!hasLoadedChunk(wid, ...ijk)) {\n                let currentWorld = worldModel.getWorld(wid);\n                let currentChunks = currentWorld.allChunks;\n                let currentChunk = currentChunks.get(currentId);\n                const dx = currentWorld.xSize, dy = currentWorld.ySize, dz = currentWorld.zSize;\n\n                if (!forPlayer) {\n                    if (!currentChunk) {\n                        currentChunk = ChunkBuilder.addChunk(dx, dy, dz, currentId, currentWorld);\n                        currentChunks.set(currentId, currentChunk);\n                        ChunkBuilder.computeChunkFaces(currentChunk);\n                        return currentChunk;\n                    } else if (!currentChunk.ready) {\n                        ChunkBuilder.computeChunkFaces(currentChunk);\n                        return currentChunk;\n                    } else return null;\n                } else {\n                    return currentChunk;\n                }\n            }\n        }\n    }\n\n    static getOOBPlayerChunks(player, starterChunk, worldModel, xModel, consistencyModel, thresh) {\n        let avatar = player.avatar;\n        var unloadedChunksForPlayer = {};\n        let chunksToUnload = [];\n\n        let aid = avatar.id;\n        let startWid = avatar.worldId;\n        let chunkIdsForEntity = consistencyModel.chunkIdsPerWorldForEntity(aid);\n\n        let w = worldModel.getWorld(startWid);\n        if (!w) { console.log('Could not get starting world from avatar.'); return; }\n        let c = w.getChunkByCoordinates(...avatar.position);\n        if (!c) { console.log('Could not get starting chunk from avatar.'); return; }\n        let startCid = c.chunkId;\n        let connectivity = xModel.getConnectivity(startWid, startCid, worldModel, thresh, true);\n        let okChunks = connectivity[1];\n        let marks = new Map();\n        okChunks.forEach(c => marks.set(c[0]+','+c[1], c[2]));\n\n        chunkIdsForEntity.forEach((chunkIds, worldId) => {\n            chunkIds.forEach(chunkId => {\n                let distance = marks.get(worldId+','+chunkId);\n                if (distance === undefined || distance === null || distance > thresh)\n                    chunksToUnload.push([worldId, chunkId])\n            });\n        });\n\n        // Recurse on unloaded chunk ids.\n        for (let i = 0, l = chunksToUnload.length; i < l; ++i) {\n            let chunkToUnload = chunksToUnload[i];\n            let currentWorld = chunkToUnload[0];\n            let currentId = chunkToUnload[1];\n            if (!unloadedChunksForPlayer.hasOwnProperty(currentWorld))\n                unloadedChunksForPlayer[currentWorld] = {};\n\n            unloadedChunksForPlayer[currentWorld][currentId] = null;\n        }\n\n        return unloadedChunksForPlayer;\n    }\n\n}\n\nexport default ChunkBuilder;\n"]}