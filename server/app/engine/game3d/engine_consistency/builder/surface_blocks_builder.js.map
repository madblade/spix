{"version":3,"sources":["../../../../../../../server/app/engine/game3d/engine_consistency/builder/surface_blocks_builder.js"],"names":[],"mappings":"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","file":"surface_blocks_builder.js","sourcesContent":["/**\n *\n */\n\n'use strict';\n\nimport ChunkBuilder from './builder_chunks';\n\nclass CSBX {\n\n    static debug = false;\n    \n    static extractSurfaceBlocks(chunk) {\n\n        let neighbourChunks = [];\n        let neighbourBlocks = [];\n\n        const numberOfNeighbours = 6;\n\n        // Get all neighbour chunks.\n        for (let i = 0; i < numberOfNeighbours; ++i) {\n            neighbourChunks.push(ChunkBuilder.getNeighboringChunk(chunk, i));\n            neighbourBlocks.push(neighbourChunks[i].blocks);\n        }\n\n        let currentSbs = chunk.surfaceBlocks;\n        let blocks = chunk.blocks;\n        let nSbs = [];\n        for (let i = 0; i < numberOfNeighbours; ++i) {\n            nSbs.push({});\n        }\n\n        const iSize = chunk.dimensions[0];\n        const ijSize = chunk.dimensions[0] * chunk.dimensions[1];\n        const capacity = blocks.length;\n\n        var addSurfaceBlock = function (bid, sbs) {\n            const ijC = bid % ijSize;\n            const z = (bid - ijC) / ijSize;\n            if (sbs.hasOwnProperty(z)) sbs[z].push((ijC));\n            else sbs[z] = [ijC];\n        };\n\n        // Test neighbourhood.\n        for (let b = 0; b < capacity; ++b) {\n            if (blocks[b] !== 0) {\n                const iPlus = b+1;\n                if (iPlus % iSize !== 0) {\n                    if (blocks[iPlus] === 0) {\n                        addSurfaceBlock(b, currentSbs);\n                        continue;\n                    }\n                } else { // Access other chunk\n                    if (neighbourBlocks[0][iPlus - iSize] === 0) {\n                        addSurfaceBlock(b, currentSbs);\n                        continue;\n                    }\n                }\n\n                const iMinus = b-1;\n                if (iMinus % iSize !== iSize-1) {\n                    if (blocks[iMinus] === 0) {\n                        addSurfaceBlock(b, currentSbs);\n                        continue;\n                    }\n                } else { // Access other chunk\n                    if (neighbourBlocks[1][iMinus + iSize] === 0) {\n                        addSurfaceBlock(b, currentSbs);\n                        continue;\n                    }\n                }\n\n                const jPlus = b+iSize;\n                if ((jPlus-b%iSize) % ijSize !== 0) {\n                    if (blocks[jPlus] === 0) {\n                        addSurfaceBlock(b, currentSbs);\n                        continue;\n                    }\n                } else { // Access other chunk\n                    if (neighbourBlocks[2][jPlus - ijSize] === 0) {\n                        addSurfaceBlock(b, currentSbs);\n                        continue;\n                    }\n                }\n\n                const jMinus = b-iSize;\n                if ((jMinus-b%iSize) % ijSize !== ijSize-1) {\n                    if (blocks[jMinus] === 0) {\n                        addSurfaceBlock(b, currentSbs);\n                        continue;\n                    }\n                } else { // Access other chunk\n                    if (neighbourBlocks[3][jMinus + ijSize] === 0) {\n                        addSurfaceBlock(b, currentSbs);\n                        continue;\n                    }\n                }\n\n                // TODO [HIGH] z criteria.\n                const kPlus = b+ijSize;\n                if (kPlus < capacity) {\n                    if (blocks[kPlus] === 0) {\n                        addSurfaceBlock(b, currentSbs);\n                        continue;\n                    }\n                } else {\n                    if (neighbourBlocks[4][kPlus - capacity] === 0) {\n                        addSurfaceBlock(b, currentSbs);\n                        continue;\n                    }\n                }\n\n                const kMinus = b-ijSize;\n                if (kMinus >= 0) {\n                    if (blocks[kMinus] === 0) {\n                        addSurfaceBlock(b, currentSbs);\n                        continue;\n                    }\n                } else {\n                    if (neighbourBlocks[5][kMinus+capacity] === 0) {\n                        addSurfaceBlock(b, currentSbs);\n                        continue;\n                    }\n                }\n\n                if (CSBX.debug) console.log(b + ' is not a neighbour.');\n\n            } else { // If the current block is empty, test for neighbour x+/y+/z+\n                const iPlus = b+1;\n                if (iPlus % iSize === 0) {\n                    if (neighbourBlocks[0][iPlus - iSize] !== 0) {\n                        addSurfaceBlock(b, currentSbs);\n                        continue;\n                    }\n                }\n\n                const jPlus = b+iSize;\n                if ((jPlus-b%iSize) % ijSize === 0) {\n                    if (neighbourBlocks[2][jPlus - ijSize] !== 0) {\n                        addSurfaceBlock(b, currentSbs);\n                        continue;\n                    }\n                }\n\n                // TODO [HIGH] check z criteria.\n                const kPlus = b+ijSize;\n                if (kPlus >= capacity) {\n                    if (neighbourBlocks[4][kPlus - capacity] !== 0) {\n                        addSurfaceBlock(b, currentSbs);\n                        // continue;\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport default CSBX;\n"]}