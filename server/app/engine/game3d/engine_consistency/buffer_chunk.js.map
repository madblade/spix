{"version":3,"sources":["../../../../../../server/app/engine/game3d/engine_consistency/buffer_chunk.js"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;IAEM;AAEF,aAFE,WAEF,GAAc;4CAFZ,aAEY;;AACV,aAAK,aAAL,GAAqB,mBAArB,CADU;KAAd;;;;;;;+BAFE;;8CASoB,UAAU,aAAa,eAAe,aAAa;;AAErE,gBAAI,CAAC,WAAD,IAAgB,CAAC,aAAD,EAAgB,OAApC;;;AAFqE,gBAKjE,eAAe,aAAf,EAA8B;AAC9B,qBAAK,IAAI,KAAJ,IAAa,WAAlB,EAA+B;AAC3B,wBAAI,SAAS,aAAT,EAAwB;AACxB,8CAAc,YAAY,KAAZ,CAAd,EAAkC,cAAc,KAAd,CAAlC;AADwB,+BAEjB,cAAc,KAAd,CAAP,CAFwB;qBAA5B;iBADJ;;;AAD8B,qCAS9B,CAAc,WAAd,EAA2B,aAA3B,EAT8B;aAAlC,MAWK,IAAI,aAAJ,EAAmB,cAAc,aAAd,CAAnB;;AAEL,gBAAI,WAAJ,EAAiB,YAAY,QAAZ,IAAwB,WAAxB,CAAjB;;;AAlBqE,gBAqBrE,CAAK,aAAL,CAAmB,GAAnB,CAAuB,QAAvB,EAAiC,WAAjC,EArBqE;;;;;;;oCAyB7D;AACR,mBAAO,kBAAQ,KAAK,aAAL,CAAf,CADQ;;;;gCAIJ;AACJ,iBAAK,aAAL,GAAqB,mBAArB,CADI;;;WAtCN;;;kBA4CS","file":"buffer_chunk.js","sourcesContent":["/**\n *\n */\n\n'use strict';\n\nclass ChunkBuffer {\n\n    constructor() {\n        this._outputBuffer = new Map();\n    }\n\n    // addedChunks:     world id => chunk id => [fast components, fast component ids]\n    // removedChunks:   world id => chunk id => null\n    // updatedChunks:   (topologyEngine)\n    updateChunksForPlayer(playerId, addedChunks, removedChunks, addedWorlds) {\n        // Check.\n        if (!addedChunks && !removedChunks) return;\n\n        // Aggregate.\n        if (addedChunks && removedChunks) {\n            for (let propA in addedChunks) {\n                if (propA in removedChunks) {\n                    Object.assign(addedChunks[propA], removedChunks[propA]); // Not the same cid to add & delete.\n                    delete removedChunks[propA];\n                }\n            }\n\n            // After deleting everything in common with removedChunks, can safely assign the remainder.\n            Object.assign(addedChunks, removedChunks);\n        }\n        else if (removedChunks) addedChunks = removedChunks;\n\n        if (addedWorlds) addedChunks['worlds'] = addedWorlds;\n\n        // Output.\n        this._outputBuffer.set(playerId, addedChunks);\n    }\n\n    // Shallow.\n    getOutput() {\n        return new Map(this._outputBuffer);\n    }\n\n    flush() {\n        this._outputBuffer = new Map();\n    }\n\n}\n\nexport default ChunkBuffer;\n"]}