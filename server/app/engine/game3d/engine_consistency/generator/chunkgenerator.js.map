{"version":3,"sources":["../../../../../../../server/app/engine/game3d/engine_consistency/generator/chunkgenerator.js"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEM;;;;;;;;;;;;;;uCASoB,GAAG,GAAG,GAAG,IAAI,OAAO;AACtC,oBAAQ,GAAR,CAAY,oBAAoB,EAApB,CAAZ,CADsC;AAEtC,gBAAI,IAAI,oBAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,EAAnB,EAAuB,KAAvB,CAAJ;;;;;;AAFkC,gBAQlC;;AAEA,kDAAgB,sBAAhB,CAAuC,CAAvC,EAA0C,KAA1C,EAAiD,MAAM,OAAN,CAAjD,CAFA;aAAJ,CAGE,OAAO,CAAP,EAAU;AACR,wBAAQ,GAAR,CAAY,EAAE,KAAF,CAAZ,CADQ;aAAV;;AAIF,mBAAO,CAAP,CAfsC;;;;oCAkBvB,GAAG,GAAG,GAAG,IAAI,OAAO;;AAEnC,gBAAI,IAAI,oBAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,EAAnB,EAAuB,KAAvB,CAAJ;;;;;;;;AAF+B,6CAUnC,CAAgB,sBAAhB,CAAuC,CAAvC,EAA0C,KAA1C,EAAiD,MAAM,OAAN,CAAjD;;AAVmC,mBAY5B,CAAP,CAZmC;;;WA3BrC;;;eAEK,QAAQ;kBA0CJ","file":"chunkgenerator.js","sourcesContent":["/**\n *\n */\n\n'use strict';\n\nimport Chunk            from './../../model_world/chunk';\n\nimport GenTest          from './generator_test.js';\nimport GenAnalytic      from './generator_analytic.js';\nimport GenSimple        from './generator_simple.js';\nimport GenPerlin        from './generator_perlin.js';\nimport GenSimplePerlin  from './generator_simple_perlin.js';\n\nclass ChunkGenerator {\n\n    static debug = false;\n\n    /**\n     * N.B. the created chunks are in memory but not ready yet.\n     * To finalize creation, add them into the manager model.\n     * Then, call Extractor.computeFaces(chunk).\n     */\n    static createRawChunk(x, y, z, id, world) {\n        console.log('createRawChunk ' + id);\n        var c = new Chunk(x, y, z, id, world);\n\n        //GenTest.testChunk(c);\n        //GenTest.testMerge(c);\n        //GenSimple.fillChunk(c, 40, 1);\n        //GenAnalytic.waveChunk(c, 40, 48, 1);\n        try {\n            // GenPerlin.perlinGeneration(c);\n            GenSimplePerlin.simplePerlinGeneration(c, false, world.worldId);\n        } catch (e) {\n            console.log(e.stack);\n        }\n\n        return c;\n    }\n\n    static createChunk(x, y, z, id, world) {\n\n        var c = new Chunk(x, y, z, id, world);\n\n        // let generationMethod = world.generationMethod;\n        // switch (generationMethod) {\n        // GenSimple.fillChunk(c, 41, 1);\n        // GenAnalytic.waveChunk(c, 10, 15, 1);\n        // GenSimple.fillChunk(c, 256, 0);\n        // GenPerlin.perlinGeneration(c);\n        GenSimplePerlin.simplePerlinGeneration(c, false, world.worldId); // params: chunk, doShuffleChunks\n\n        return c;\n    }\n\n}\n\nexport default ChunkGenerator;\n"]}