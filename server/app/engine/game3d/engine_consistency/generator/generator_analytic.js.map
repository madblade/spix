{"version":3,"sources":["../../../../../../../server/app/engine/game3d/engine_consistency/generator/generator_analytic.js"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;;;AAEA;;;;;;IAEM;;;;;;;kCAEe,OAAO,MAAM,MAAM,SAAS;AACzC,gBAAI,QAAQ,IAAR,IAAgB,QAAQ,MAAM,QAAN,EAAgB,QAAQ,GAAR,CAAY,oCAAZ,EAA5C;;AAEA,gBAAM,KAAK,MAAM,UAAN,CAAiB,CAAjB,CAAL,CAHmC;AAIzC,gBAAM,KAAK,MAAM,UAAN,CAAiB,CAAjB,CAAL,CAJmC;AAKzC,gBAAM,SAAS,OAAK,IAAL,CAL0B;;AAOzC,gBAAM,iBAAiB,KAAK,EAAL,GAAU,IAAV,CAPkB;AAQzC,gBAAM,WAAW,KAAK,EAAL,GAAU,IAAV,CARwB;AASzC,gBAAM,iBAAiB,MAAM,QAAN,CATkB;;AAWzC,gBAAM,UAAU,MAAM,MAAN,GAAa,EAAb,CAXyB;AAYzC,gBAAM,UAAU,MAAM,MAAN,GAAa,EAAb,CAZyB;AAazC,gBAAI,KAAM,SAAN,EAAM,CAAC,CAAD,EAAI,CAAJ,EAAU;AAChB,oBAAI,IAAI,CAAC,IAAI,OAAJ,CAAD,GAAc,GAAd,CADQ;AAEhB,oBAAI,IAAI,CAAC,IAAI,OAAJ,CAAD,GAAc,GAAd,CAFQ;AAGhB,uBAAO,MAAI,MAAJ,IAAY,gBACf,KAAK,KAAK,GAAL,CAAS,IAAI,CAAJ,GAAQ,IAAI,KAAK,GAAL,CAAS,CAAT,CAAJ,CAAtB,GACE,KAAK,KAAK,GAAL,CAAS,IAAI,CAAJ,GAAQ,IAAI,CAAJ,GAAQ,IAAR,CAAtB,GACA,QAAQ,KAAK,GAAL,CAAS,IAAI,CAAJ,GAAQ,IAAI,CAAJ,GAAQ,IAAR,CAAzB,CAHC,CAHS;aAAV,CAb+B;;AAsBzC,gBAAI,SAAS,IAAI,UAAJ,CAAe,cAAf,CAAT,CAtBqC;AAuBzC,gBAAI,MAAM,MAAN,KAAiB,CAAjB,EAAoB;AACpB,uBAAO,IAAP,CAAY,CAAZ,EAAe,CAAf,EAAkB,cAAlB,EADoB;AAEpB,uBAFoB;aAAxB;AAIA,mBAAO,IAAP,CAAY,OAAZ,EAAqB,CAArB,EAAwB,cAAxB,EA3ByC;;AA6BzC,mBAAO,IAAP,CAAY,CAAZ,EAAe,cAAf,EAA+B,QAA/B,EA7ByC;AA8BzC,gBAAI,QAAQ,cAAR,CA9BqC;AA+BzC,iBAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,MAAJ,EAAY,IAAI,CAAJ,EAAO,EAAE,CAAF,EAAK;AACpC,qBAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,EAAJ,EAAQ,EAAE,CAAF,EAAK;AACzB,yBAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,EAAJ,EAAQ,EAAE,CAAF,EAAK;AACzB,4BAAI,IAAI,GAAG,CAAH,EAAM,CAAN,CAAJ,EAAc,OAAO,KAAP,IAAgB,OAAhB,CAAlB;AACA,gCAFyB;qBAA7B;iBADJ;aADJ;;AASA,mBAAO,IAAP,CAAY,CAAZ,EAAe,QAAf,EAAyB,cAAzB,EAxCyC;;AA0CzC,kBAAM,MAAN,GAAe,MAAf,CA1CyC;AA2CzC,gBAAI,yBAAe,KAAf,EAAsB,QAAQ,GAAR,CAAY,OAAO,MAAM,MAAN,CAAa,MAAb,GAAsB,oBAA7B,CAAZ,CAA1B;;;WA7CF;;;kBAiDS","file":"generator_analytic.js","sourcesContent":["/**\n *\n */\n\n'use strict';\n\nimport ChunkGenerator from './chunkgenerator';\n\nclass Analytic {\n\n    static waveChunk(chunk, minZ, maxZ, blockId) {\n        if (minZ >= maxZ || maxZ >= chunk.capacity) console.log(\"Wave generator: invalid parameters\");\n\n        const dx = chunk.dimensions[0];\n        const dy = chunk.dimensions[1];\n        const deltaK = maxZ-minZ;\n\n        const underneathWave = dx * dy * minZ;\n        const overWave = dx * dy * maxZ;\n        const numberOfBlocks = chunk.capacity;\n\n        const offsetX = chunk.chunkI*dx;\n        const offsetY = chunk.chunkJ*dy;\n        let fn = ((i, j) => {\n            let x = (i + offsetX)*100;\n            let y = (j + offsetY)*100;\n            return 0.3*deltaK*(1.57079632679 +\n                .6 * Math.sin(x - y + 2 * Math.sin(y))\n                + .3 * Math.sin(x * 2 + y * 2 * 1.81)\n                + .1825 * Math.sin(x * 3 - y * 2 * 2.18));\n        });\n\n        let blocks = new Uint8Array(numberOfBlocks);\n        if (chunk.chunkK !== 0) {\n            blocks.fill(0, 0, numberOfBlocks);\n            return;\n        }\n        blocks.fill(blockId, 0, underneathWave);\n\n        blocks.fill(0, underneathWave, overWave);\n        let index = underneathWave;\n        for (let k = 0, l = deltaK; k < l; ++k) {\n            for (let i = 0; i < dx; ++i) {\n                for (let j = 0; j < dy; ++j) {\n                    if (k < fn(i, j)) blocks[index] = blockId;\n                    index++;\n                }\n            }\n        }\n\n        blocks.fill(0, overWave, numberOfBlocks);\n\n        chunk.blocks = blocks;\n        if (ChunkGenerator.debug) console.log(\"\\t\" + chunk.blocks.length + \" blocks generated.\");\n    }\n}\n\nexport default Analytic;\n"]}