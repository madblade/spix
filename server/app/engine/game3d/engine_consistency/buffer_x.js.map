{"version":3,"sources":["../../../../../../server/app/engine/game3d/engine_consistency/buffer_x.js"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;IAEM;AAEF,aAFE,OAEF,GAAc;4CAFZ,SAEY;;;;;;AAKV,aAAK,aAAL,GAAqB,mBAArB,CALU;KAAd;;+BAFE;;yCAUe,UAAU,QAAQ,UAAU;AACzC,gBAAI,CAAC,MAAD,IAAW,CAAC,QAAD,EAAW,OAA1B;;AAEA,gBAAI,UAAU,QAAV,EAAoB,sBAAc,MAAd,EAAsB,QAAtB,EAAxB,KACK,IAAI,QAAJ,EAAc,SAAS,QAAT,CAAd;;AAEL,iBAAK,aAAL,CAAmB,GAAnB,CAAuB,QAAvB,EAAiC,MAAjC,EANyC;;;;oCASjC;AACR,mBAAO,kBAAQ,KAAK,aAAL,CAAf,CADQ;;;;gCAIJ;AACJ,iBAAK,aAAL,GAAqB,mBAArB,CADI;;;WAvBN;;;kBA6BS","file":"buffer_x.js","sourcesContent":["/**\n *\n */\n\n'use strict';\n\nclass XBuffer {\n\n    constructor() {\n        // Don't implement add/removeX\n        // For they'll be updated next frame.\n        // Should do same with players :/\n\n        this._outputBuffer = new Map();\n    }\n\n    updateXForPlayer(playerId, addedX, removedX) {\n        if (!addedX && !removedX) return;\n\n        if (addedX && removedX) Object.assign(addedX, removedX);\n        else if (removedX) addedX = removedX;\n\n        this._outputBuffer.set(playerId, addedX);\n    }\n\n    getOutput() {\n        return new Map(this._outputBuffer);\n    }\n\n    flush() {\n        this._outputBuffer = new Map();\n    }\n\n}\n\nexport default XBuffer;\n"]}