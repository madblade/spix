{"version":3,"sources":["../../../../../../../server/app/engine/game3d/engine_consistency/updater/updater.js"],"names":[],"mappings":"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","file":"updater.js","sourcesContent":["/**\n *\n */\n\n'use strict';\n\nimport XUpdater from './updater_x';\nimport XLoader  from '../loader/loader_x';\nimport XBuffer  from '../buffer_x';\n\nclass Updater {\n\n    constructor(consistencyEngine) {\n\n        // Model.\n        this._game              = consistencyEngine.game;\n        this._worldModel        = consistencyEngine.worldModel;\n        this._consistencyModel  = consistencyEngine.consistencyModel;\n\n        // Engine.\n        this._physicsEngine     = consistencyEngine.physicsEngine;\n        this._chunkBuffer       = consistencyEngine.chunkBuffer;\n        this._entityBuffer      = consistencyEngine.entityBuffer;\n        this._chunkLoader       = consistencyEngine.chunkLoader;\n        this._entityLoader      = consistencyEngine.entityLoader;\n\n        // xEngine.\n        this._xUpdater          = new XUpdater(consistencyEngine);\n        this._xLoader           = new XLoader(consistencyEngine);\n        this._xBuffer           = new XBuffer();\n\n        // X creation/deletion buffer.\n        this._inputBuffer       = [];\n    }\n\n    static bench = false;\n\n    addInput(meta, avatar) {\n        this._inputBuffer.push([avatar, meta]);\n    }\n\n    update() {\n        // User-send updates (mainly x).\n        this.processBuffer();\n\n        // Compute aggregates to send.\n        this.updateConsistency();\n    }\n\n    processBuffer() {\n        var buffer = this._inputBuffer;\n        var xUpdater = this._xUpdater;\n\n        buffer.forEach(x => {\n            // console.log(x[0]); // Avatar\n            console.log(x[1]); // { action: 'gate', meta: [ 'add', -2, 6, -16, portalToLinkId ] }\n            xUpdater.update(x[0], x[1])\n        });\n\n        // Flush X INPUT (BEFORE SEND UPDATE).\n        this._inputBuffer = [];\n    }\n\n    // Get X output\n    getOutput() {\n        return this._xBuffer.getOutput();\n    }\n\n    // Flush X OUTPUT (AFTER SEND UPDATER).\n    flushBuffers() {\n        this._xBuffer.flush();\n    }\n\n    // This only takes care of LOADING things with respect to players.\n    // (entities, chunks)\n    // The Output class directly manages CHANGING things.\n    // (it gets outputs from TopologyEngine and PhysicsEngine, then transmits them to players)\n    // Loading and unloading objects is done exclusively here.\n    // Single criterion for maintaining loaded objects consistent: distance.\n    // (objects are initialized with STATES so they don't need updates)\n    updateConsistency() {\n        let players = this._game.players;\n\n        // Get buffers.\n        let cbuf = this._chunkBuffer;\n        let ebuf = this._entityBuffer;\n        let xbuf = this._xBuffer;\n\n        // Model and engines.\n        let worldModel = this._worldModel;\n        let consistencyModel = this._consistencyModel;\n        let updatedEntities = this._physicsEngine.getOutput();\n        let addedPlayers = this._entityBuffer.addedPlayers;\n        let removedPlayers = this._entityBuffer.removedPlayers;\n\n        // Loaders\n        let eLoader = this._entityLoader;\n        let cLoader = this._chunkLoader;\n        let xLoader = this._xLoader;\n\n        // Object iterator.\n        let forEach = (object, callback) => { for (let id in object) { callback(id) } };\n\n        // For each player...\n        let t = process.hrtime();\n        let dt1;\n        players.forEach(p => { if (p.avatar) {\n\n            let pid = p.avatar.id;\n\n            // Compute change for entities in range.\n            let addedEntities, removedEntities,\n                u = eLoader.computeNewEntitiesInRange(p, updatedEntities, addedPlayers, removedPlayers);\n\n            if (u) [addedEntities, removedEntities] = u;\n            // TODO [MEDIUM] filter: updated entities and entities that enter in range.\n\n            dt1 = (process.hrtime(t)[1]/1000);\n            if (Updater.bench && dt1 > 1000) console.log('\\t' + dt1 + ' computeNew Entities.');\n            t = process.hrtime();\n\n            // Compute change for chunks in range.\n            let addedChunks, removedChunks,\n                v = cLoader.computeNewChunksInRange(p);\n            if (v) [addedChunks, removedChunks] = v;\n\n            dt1 = (process.hrtime(t)[1]/1000);\n            if (Updater.bench && dt1 > 1000) console.log('\\t' + dt1 + ' computeNew Chunks.');\n            t = process.hrtime();\n\n            let addedX, removedX, addedW,\n                x = xLoader.computeNewXInRange(p);\n            if (x) [addedX, removedX] = x;\n\n            // Update consistency model.\n            // WARN: updates will only be transmitted during next output pass.\n            // BE CAREFUL HERE\n            if (addedEntities)      forEach(addedEntities, e => consistencyModel.setEntityLoaded(pid, parseInt(e)));\n            if (removedEntities)    forEach(removedEntities, e => consistencyModel.setEntityOutOfRange(pid, parseInt(e)));\n\n            if (addedX)             forEach(addedX, x => consistencyModel.setXLoaded(pid, parseInt(x)));\n            if (removedX)           forEach(removedX, x => consistencyModel.setXOutOfRange(pid, parseInt(x)));\n\n            if (addedChunks)        {\n                addedW = {};\n                forEach(addedChunks, wid => {\n                    if (!(wid in addedW)) {\n                        let w = worldModel.getWorld(parseInt(wid));\n                        addedW[wid] = [w.xSize, w.ySize, w.zSize];\n                    }\n                    forEach(addedChunks[wid], c => {consistencyModel.setChunkLoaded(pid, parseInt(wid), c)});\n                }) ;\n            }\n            if (removedChunks)      forEach(removedChunks, wid => {\n                forEach(removedChunks[wid], c => consistencyModel.setChunkOutOfRange(pid, parseInt(wid), c))\n            });\n\n            // Update output buffers.\n            if (addedChunks || removedChunks)\n                cbuf.updateChunksForPlayer(pid, addedChunks, removedChunks, addedW);\n            if (addedEntities || removedEntities)\n                ebuf.updateEntitiesForPlayer(pid, addedEntities, removedEntities);\n            if (addedX || removedX)\n                xbuf.updateXForPlayer(pid, addedX, removedX);\n        }});\n    }\n\n}\n\nexport default Updater;\n"]}