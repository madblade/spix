{"version":3,"sources":["../../../../../../server/app/engine/game3d/engine_consistency/consistency.js"],"names":[],"mappings":"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","file":"consistency.js","sourcesContent":["/**\n *\n */\n\n'use strict';\n\nimport ChunkBuffer      from './buffer_chunk';\nimport EntityBuffer     from './buffer_entity';\n\nimport ChunkLoader      from './loader/loader_chunk';\nimport EntityLoader     from './loader/loader_entity';\n\nimport Generator        from './generator/generator';\nimport Updater          from './updater/updater';\n\nclass ConsistencyEngine {\n\n    constructor(game) {\n        this._game = game;\n\n        // Models.\n        this._entityModel       = game.entityModel;\n        this._worldModel        = game.worldModel;\n        this._xModel            = game.xModel;\n        this._consistencyModel  = game.consistencyModel;\n\n        // Buffers.\n        this._chunkBuffer       = new ChunkBuffer();\n        this._entityBuffer      = new EntityBuffer();\n\n        // Other engines.\n        this._physicsEngine     = game.physicsEngine;\n        this._topologyEngine    = game.topologyEngine;\n\n        // Internal engine.\n        this._generator         = new Generator(this);\n        this._chunkLoader       = new ChunkLoader(this);\n        this._entityLoader      = new EntityLoader(this);\n        this._updater           = new Updater(this);\n    }\n\n    get game()                  { return this._game; }\n    get worldModel()            { return this._worldModel; }\n    get entityModel()           { return this._entityModel; }\n    get xModel()                { return this._xModel; }\n    get consistencyModel()      { return this._consistencyModel; }\n\n    get physicsEngine()         { return this._physicsEngine; }\n    get chunkBuffer()           { return this._chunkBuffer; }\n    get entityBuffer()          { return this._entityBuffer; }\n    get chunkLoader()           { return this._chunkLoader; }\n    get entityLoader()          { return this._entityLoader; }\n\n    // On connection / disconnection.\n    spawnPlayer(player) {\n        this._entityModel.spawnPlayer(player);\n        this._consistencyModel.spawnPlayer(player);\n        this._entityBuffer.spawnPlayer(player);\n    }\n\n    despawnPlayer(playerId) {\n        this._entityBuffer.removePlayer(playerId);\n        this._consistencyModel.removePlayer(playerId);\n        this._entityModel.removePlayer(playerId);\n    }\n\n    addInput(meta, avatar) {\n        this._updater.addInput(meta, avatar);\n    }\n\n    update() {\n        this._updater.update();\n    }\n\n    getChunkOutput() {\n        return this._chunkBuffer.getOutput();\n    }\n\n    getEntityOutput() {\n        return this._entityBuffer.getOutput();\n    }\n\n    getPlayerOutput() {\n        return this._entityBuffer.addedPlayers;\n    }\n\n    getXOutput() {\n        return this._updater.getOutput();\n    }\n\n    flushBuffers() {\n        this._chunkBuffer.flush();\n        this._entityBuffer.flush();\n        this._updater.flushBuffers();\n    }\n\n    // The first time, FORCE BUILD when output requests CE initial output.\n    initChunkOutputForPlayer(player) {\n        let aid = player.avatar.id;\n        let worldId = player.avatar.worldId;\n        let worldModel = this._worldModel;\n        let world = worldModel.getWorld(worldId);\n\n        let cs = world.allChunks;\n        let cm = this._consistencyModel;\n\n        // Object.\n        var chunkOutput = this._chunkLoader.computeChunksForNewPlayer(player);\n\n        let addedW = {};\n        for (let wid in chunkOutput) {\n            if (!(wid in addedW)) {\n                let w = worldModel.getWorld(parseInt(wid));\n                addedW[wid] = [w.xSize, w.ySize, w.zSize];\n            }\n            let chunkIds = chunkOutput[wid];\n            for (let cid in chunkIds)\n                if (cs.has(cid)) cm.setChunkLoaded(aid, parseInt(wid), cid);\n        }\n\n        chunkOutput['worlds'] = addedW;\n\n        // WARN: idem, updates must be transmitted right after this call\n        // otherwise its player will be out of sync.\n        return chunkOutput;\n    }\n\n    // The first time, FORCE COMPUTE in-range entities when output requests CE output.\n    initEntityOutputForPlayer(player) {\n        let aid = player.avatar.id;\n        let es = this._entityModel.entities;\n        let cm = this._consistencyModel;\n\n        // Object.\n        var entityOutput = this._entityLoader.computeEntitiesInRange(player);\n\n        for (let eid in entityOutput)\n            if (es.has(eid)) cm.setEntityLoaded(aid, eid);\n\n        // Updates must be transmitted after this call.\n        return entityOutput;\n    }\n\n    generateWorld() {\n        return this._generator.generateWorld();\n    }\n\n}\n\nexport default ConsistencyEngine;\n"]}