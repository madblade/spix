{"version":3,"sources":["../../../../../../../../server/app/engine/game3d/engine_physics/solver/collision/terrain.js"],"names":[],"mappings":"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","file":"terrain.js","sourcesContent":["/**\n *\n */\n\n'use strict';\n\nclass TerrainCollider {\n\n    /**\n     * @returns 'has collided'\n     */\n    static linearCollide(entity, world, position, newPosition, dt) {\n\n        // Intersect on first Non-Free Block\n        if (TerrainCollider.intersectAmanditesWoo(position, newPosition, world, entity,\n            (world, entity,                 // objects\n                i, j, k,                    // next voxel coordinates\n                tMaxX, tMaxY, tMaxZ,        // current value of t at which p1p2 crosses (x,y,z) orth. comp.\n                tDeltaX, tDeltaY, tDeltaZ,  // delta between crosses on orth. comp.\n                dx, dy, dz,                 // orth. directions of p1p2\n                x1, y1, z1,                 // starting point\n                x2, y2, z2,                 // ending point\n                ntx, nty, ntz               // last orth. to be updated (current shift coordinate)\n            ) => {\n\n            if (world.isFree([i, j, k])) return false;\n\n            // Collision\n            // Damping on first encountered NFB (collision later on)\n\n            const tol = .001;\n            const nx0 = dx > 0 ? i-tol : i+1+tol;\n            const ny0 = dy > 0 ? j-tol : j+1+tol;\n            const nz0 = dz > 0 ? k-tol : k+1+tol;\n            let newPosition = [0, 0, 0];\n            let oldAdherence = [false, false, false, false, false, false];\n            for (let ii = 0; ii<6; ++ii) { oldAdherence[ii] = entity.adherence[ii]; }\n\n            if (ntx) {\n                const t = tMaxX-tDeltaX;\n                const ddx = dx < 0 ? 1 : -1;\n\n                // Projections\n                let ny = y1+(y2-y1);\n                let nyt = y1+(y2-y1)*t;\n                let dby = Math.abs(Math.floor(ny)-Math.floor(nyt));\n                if (dby < 2) {\n                    if (dy < 0) {\n                        const free = world.isFree([i+ddx, j-1, k]);\n                        if ((!free && dby < 1 && ny > ny0-1) || free) { nyt = ny; entity.adherence[1] = false; }\n                        else { nyt = ny0-1; if (dby > 0 && !free) entity.adherence[1] = true; }\n                    }\n                    if (dy > 0) {\n                        const free = world.isFree([i+ddx, j+1, k]);\n                        if ((!free && dby < 1 && ny < ny0+1) || free) { nyt = ny; entity.adherence[4] = false; }\n                        else { nyt = ny0+1; if (dby > 0 && !free) entity.adherence[4] = true; }\n                    }\n                }\n\n                let nz = z1+(z2-z1);\n                let nzt = z1+(z2-z1)*t;\n                let dbz = Math.abs(Math.floor(nz)-Math.floor(nzt));\n                if (dbz < 2) {\n                    if (dz < 0) {\n                        const free = world.isFree([i+ddx, j, k-1]);\n                        if ((!free && dbz < 1 && nz > nz0-1) || free) { nzt = nz; entity.adherence[2] = false; }\n                        else { nzt = nz0-1; if (dbz > 0 && !free) entity.adherence[2] = true; }\n                    }\n                    if (dz > 0) {\n                        const free = world.isFree([i+ddx, j, k+1]);\n                        if ((!free && dbz < 1 && nz < nz0+1) || free) { nzt = nz; entity.adherence[5] = false; }\n                        else { nzt = nz0+1; if (dbz > 0 && !free) entity.adherence[5] = true; }\n                    }\n                }\n\n                if (dx < 0) entity.adherence[0] = true;\n                else if (dx > 0) entity.adherence[3] = true;\n\n                newPosition = [nx0, nyt, nzt];\n                // entity.acceleration[0] = 0;\n                entity.speed[0] = 0;\n                entity.speed[1] = entity._impulseSpeed[1];\n                if (entity.acceleration[2] === 0) entity.speed[2] = 0;\n            }\n\n            else if (nty) {\n                const t = tMaxY-tDeltaY;\n                const ddy = dy < 0 ? 1 : -1;\n\n                let nx = x1+(x2-x1);\n                let nxt = x1+(x2-x1)*t;\n                let dbx = Math.abs(Math.floor(nx)-Math.floor(nxt));\n                if (dbx < 2) {\n                    if (dx < 0) {\n                        const free = world.isFree([i-1, j+ddy, k]);\n                        if ((!free && dbx < 1 && nx > nx0-1) || free) { nxt = nx; entity.adherence[0] = false; }\n                        else { nxt = nx0-1; if (dbx > 0 && !free) entity.adherence[0] = true; }\n                    }\n                    if (dx > 0) {\n                        const free = world.isFree([i+1, j+ddy, k]);\n                        if ((!free && dbx < 1 && nx < nx0+1) || free) { nxt = nx; entity.adherence[3] = false; }\n                        else { nxt = nx0+1; if (dbx > 0 && !free) entity.adherence[3] =  true; }\n                    }\n                }\n\n                let nz = z1+(z2-z1);\n                let nzt = z1+(z2-z1)*t;\n                let dbz = Math.abs(Math.floor(nz)-Math.floor(nzt));\n                if (dbz < 2) {\n                    if (dz < 0) {\n                        const free = world.isFree([i, j+ddy, k-1]);\n                        if ((!free && dbz < 1 && nz > nz0-1) || free) { nzt = nz; entity.adherence[2] = false;}\n                        else { nzt = nz0-1; if (dbz > 0 && !free) entity.adherence[2] = true; }\n                    }\n                    if (dz > 0) {\n                        const free = world.isFree([i, j+ddy, k+1]);\n                        if ((!free && dbz < 1 && nz < nz0+1) || free) { nzt = nz; entity.adherence[5] = false; }\n                        else { nzt = nz0+1; if (dbz > 0 && !free) entity.adherence[5] = true; }\n                    }\n                }\n\n                if (dy < 0) entity.adherence[1] = true;\n                else if (dy > 0) entity.adherence[4] = true;\n\n                newPosition = [nxt, ny0, nzt];\n                // entity.acceleration[1] = 0;\n                entity.speed[0] = entity._impulseSpeed[0];\n                entity.speed[1] = 0;\n                if (entity.acceleration[2] === 0) entity.speed[2] = 0;\n            }\n\n            else if (ntz) {\n                const t = tMaxZ-tDeltaZ;\n                const ddz = dz < 0 ? 1 : -1;\n\n                let nx = x1+(x2-x1);\n                let nxt = x1+(x2-x1)*t;\n                let dbx = Math.abs(Math.floor(nx)-Math.floor(nxt));\n                if (dbx < 2) {\n                    if (dx < 0) {\n                        const free = world.isFree([i-1, j, k+ddz]);\n                        if ((!free && dbx < 1 && nx > nx0-1) || free) { nxt = nx; entity.adherence[0] = false; }\n                        else { nxt = nx0-1; if (dbx > 0 && !free) entity.adherence[0] = true; }\n                    }\n                    if (dx > 0) {\n                        const free = world.isFree([i+1, j, k+ddz]);\n                        if ((!free && dbx < 1 && nx < nx0+1) || free ) { nxt = nx; entity.adherence[3] = false; }\n                        else { nxt = nx0+1; if (dbx > 0 && !free) entity.adherence[3] = true; }\n                    }\n                }\n\n                let ny = y1+(y2-y1);\n                let nyt = y1+(y2-y1)*t;\n                let dby = Math.abs(Math.floor(ny)-Math.floor(nyt));\n                if (dby < 2) {\n                    if (dy < 0) {\n                        const free = world.isFree([i, j-1, k+ddz]);\n                        if ((!free && dby < 1 && ny > ny0-1) || free) { nyt = ny; entity.adherence[1] = false; }\n                        else { nyt = ny0-1; if (dby > 0 && !free) entity.adherence[1] = true; }\n                    }\n                    if (dy > 0) {\n                        const free = world.isFree([i, j+1, k+ddz]);\n                        if ((!free && dby < 1 && ny < ny0+1) || free) { nyt = ny; entity.adherence[4] = false; }\n                        else { nyt = ny0+1; if (dby > 0 && !free) entity.adherence[4] = true; }\n                    }\n                }\n\n                // One impulse allowed\n                if (dz < 0) entity.adherence[2] = true;\n                else if (dz > 0) entity.adherence[5] = true;\n\n                newPosition = [nxt, nyt, nz0];\n                // entity.acceleration[2] = 0;\n                entity.speed = entity._impulseSpeed;\n                entity.speed[2] = 0;\n            }\n\n            // Bounce\n            // entity.speed[2] = -(entity.speed[2]-entity._impulseSpeed[2]);\n            // entity.acceleration = [0, 0, 0]; // Use Euler with collisions\n            for (let ii = 0; ii < 3; ++ii) {\n\n                //if (ltNew && entity.adherence[ii]) {\n                //    entity.position[ii] = Math.floor(entity.position[ii])+tol;\n                //} else if (gtNew && entity.adherence[ii+3]) {\n                //    entity.position[ii] = Math.ceil(entity.position[ii])-tol;\n                //} else {\n                //    entity.position[ii] = newPosition[ii];\n                //}\n\n                //if (entity.adherence[ii] && newPosition[ii] > entity.position[ii]) entity.adherence[ii] = false;\n                //if (entity.adherence[3+ii] && newPosition[ii] < entity.position[ii]) entity.adherence[3+ii] = false;\n                if (newPosition[ii] < entity.position[ii] && oldAdherence[ii]) continue;\n                if (newPosition[ii] > entity.position[ii] && oldAdherence[3+ii]) continue;\n                entity.position[ii] = newPosition[ii];\n\n                //entity.adherence[ii+ (ltNew ? 0 : 3)] = false;\n            }\n\n            return true;\n\n        })) return true;\n\n        // Update entity position.\n        //entity.position = newPosition;\n        for (let ii = 0; ii < 3; ++ii) {\n            if (entity.adherence[ii] && newPosition[ii] > entity.position[ii]) entity.adherence[ii] = false;\n            if (entity.adherence[3+ii] && newPosition[ii] < entity.position[ii]) entity.adherence[3+ii] = false;\n\n            //if (entity.adherence[ii] && newPosition[ii] < entity.position[ii]) continue;\n            //if (entity.adherence[3+ii] && newPosition[ii] > entity.position[ii]) continue;\n\n            entity.position[ii] = newPosition[ii];\n            //entity.adherence[ii] = false;\n            //entity.adherence[ii+3] = false;\n        }\n\n        return false;\n    }\n\n    static intersectAmanditesWoo(p1, p2, world, entity, callback) {\n\n        let sgn = x => (x > 0 ? 1 : (x < 0 ? -1 : 0));\n        let frac0 = x => x - Math.floor(x);\n        let frac1 = x => 1.0 - x + Math.floor(x);\n        let min = (x, y) => Math.min(x, y);\n\n        let x1 = p1[0]; let x2 = p2[0];\n        let y1 = p1[1]; let y2 = p2[1];\n        let z1 = p1[2]; let z2 = p2[2];\n\n        // p1p2 is parametrized as p(t) = p1 + (p2-p1)*t\n        // tDeltaX def. how far one has to move, in units of t, s. t. the horiz. comp. of the mvt. eq. the wdth. of a v.\n        // tMaxX def. the value of t at which (p1p2) crosses the first (then nth) vertical boundary.\n        let tMaxX, tMaxY, tMaxZ,\n            tDeltaX, tDeltaY, tDeltaZ;\n        let ntx = false, nty = false, ntz = false;\n\n        const threshold = 10000000.0;\n\n        let dx = sgn(x2-x1);\n        let i = Math.floor(x1);\n        if (dx != 0) tDeltaX = min(dx / (x2 - x1), threshold); else tDeltaX = threshold;\n        if (dx > 0) tMaxX = tDeltaX * frac1(x1); else tMaxX = tDeltaX * frac0(x1);\n\n        let dy = sgn(y2-y1);\n        let j = Math.floor(y1);\n        if (dy != 0) tDeltaY = min(dy / (y2 - y1), threshold); else tDeltaY = threshold;\n        if (dy > 0) tMaxY = tDeltaY * frac1(y1); else tMaxY = tDeltaY * frac0(y1);\n\n        let dz = sgn(z2-z1);\n        let k = Math.floor(z1);\n        if (dz != 0) tDeltaZ = min(dz / (z2 - z1), threshold); else tDeltaZ = threshold;\n        if (dz > 0) tMaxZ = tDeltaZ * frac1(z1); else tMaxZ = tDeltaZ * frac0(z1);\n\n        while (tMaxX <= 1 || tMaxY <= 1 || tMaxZ <= 1) {\n            if (tMaxX < tMaxY) {\n                if (tMaxX < tMaxZ) {\n                    i += dx;\n                    tMaxX += tDeltaX;\n                    ntx = true; nty = false; ntz = false;\n                } else {\n                    k += dz;\n                    tMaxZ += tDeltaZ;\n                    ntx = false; nty = false; ntz = true;\n                }\n            } else {\n                if (tMaxY < tMaxZ) {\n                    j += dy;\n                    tMaxY += tDeltaY;\n                    ntx = false; nty = true; ntz = false;\n                } else {\n                    k += dz;\n                    tMaxZ += tDeltaZ;\n                    ntx = false; nty = false; ntz = true;\n                }\n            }\n\n            if (callback(\n                world, entity,                 // objects\n                i, j, k,                    // next voxel coordinates\n                tMaxX, tMaxY, tMaxZ,        // current value of t at which p1p2 crosses (x,y,z) orth. comp.\n                tDeltaX, tDeltaY, tDeltaZ,  // delta between crosses on orth. comp.\n                dx, dy, dz,                 // orth. directions of p1p2\n                x1, y1, z1,                 // starting point\n                x2, y2, z2,                 // ending point\n                ntx, nty, ntz               // last orth. to be updated (current shift coordinate)\n            )) return true;\n\n        }\n\n        // No collision\n        return false;\n    }\n\n}\n\nexport default TerrainCollider;\n"]}