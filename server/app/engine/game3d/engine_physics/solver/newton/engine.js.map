{"version":3,"sources":["../../../../../../../../server/app/engine/game3d/engine_physics/solver/newton/engine.js"],"names":[],"mappings":"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","file":"engine.js","sourcesContent":["/**\n *\n */\n\n'use strict';\n\nimport Integrator from './integrator';\n\nclass Newton {\n\n    static globalTimeDilatation = 20000000;\n    //static globalTimeDilatation = 3000000;\n    static gravity = [0, 0, -0.11];\n    //static gravity = [0, 0, 0];\n\n    static solve(physicsEngine, Δt) {\n\n        let EM = physicsEngine.entityModel;\n        let WM = physicsEngine.worldModel; // TODO [HIGH] worldify, sort/optimize in entityModel.\n        let o  = physicsEngine.outputBuffer;\n\n        let dt = Δt/Newton.globalTimeDilatation;\n        if (dt > 5.0) {\n            dt = 5.0;\n        }\n\n        EM.forEach(function(entity) {\n            const worldId = entity.worldId;\n            const world = WM.getWorld(worldId);\n            const entityUpdated = Newton.linearSolve(entity, EM, world, dt);\n\n            if (entityUpdated) {\n                o.entityUpdated(entity.id);\n            }\n        });\n\n        // Get entities inputs\n        // Compute forces on global fields\n        // Compute forces on local fields\n\n        // Solve movements\n        // Compute entity collisions\n        // Compute terrain collisions\n        // Solve again\n\n        // Update positions\n\n        // Effects\n        // Reverse time...\n\n        // Future...\n        // Update orientations\n        // Manage fragmentation\n    }\n\n    static linearSolve(entity, EM, world, dt) {\n        const theta = entity.rotation[0];\n        const ds = entity.directions;\n        const pos = entity.position;\n\n        var impulseSpeed = [0, 0, 0];\n        var force = [0, 0, 0];\n        var hasUpdated = false;\n\n        Newton.computeDesiredSpeed(entity, impulseSpeed, theta, ds, dt);\n\n        Newton.sumGlobalFields(force, pos, entity);\n\n        // Newton.sumLocalFields(force, pos, EM);\n\n        hasUpdated = Integrator.updatePosition(dt, impulseSpeed, force, entity, EM, world);\n\n        return hasUpdated;\n    }\n\n    static quadraticSolve(entity, EM, world, dt) {\n        const theta = entity.rotation[0];\n        const ds = entity.directions;\n        const pos = entity.position;\n\n        var impulseSpeed = [0, 0, 0];\n        var force = [0, 0, 0];\n        var hasUpdated = false;\n\n        Newton.computeDesiredSpeed(entity, impulseSpeed, theta, ds, dt);\n\n        Newton.sumGlobalFields(force, pos, entity);\n\n        Newton.sumLocalFields(force, pos, EM);\n\n        // TODO [HIGH] manage collisions\n\n        hasUpdated = Integrator.updatePosition(dt, impulseSpeed, force, entity, EM, world);\n\n        return hasUpdated;\n    }\n\n    static add(result, toAdd) {\n        result[0]+=toAdd[0];\n        result[1]+=toAdd[1];\n        result[2]+=toAdd[2];\n    }\n\n    static computeDesiredSpeed(entity, speed, theta, ds, dt) {\n        var desiredSpeed = [0, 0, 0];\n        const pi4 = Math.PI/4;\n\n        if (ds[0] && !ds[3]) // forward quarter\n        {\n            let theta2 = theta;\n            if (ds[1] && !ds[2]) // right\n                theta2 -= pi4;\n            else if (ds[2] && !ds[1]) // left\n                theta2 += pi4;\n            desiredSpeed[0] = -Math.sin(theta2);\n            desiredSpeed[1] = Math.cos(theta2);\n        }\n        else if (ds[3] && !ds[0]) // backward quarter\n        {\n            let theta2 = theta;\n            if (ds[1] && !ds[2]) // right\n                theta2 += pi4;\n            else if (ds[2] && !ds[1]) // left\n                theta2 -= pi4;\n            desiredSpeed[0] = Math.sin(theta2);\n            desiredSpeed[1] = -Math.cos(theta2);\n\n        }\n        else if (ds[1] && !ds[2]) // exact right\n        {\n            desiredSpeed[0] = Math.cos(theta);\n            desiredSpeed[1] = Math.sin(theta);\n\n        }\n        else if (ds[2] && !ds[1]) // exact left\n        {\n            desiredSpeed[0] = -Math.cos(theta);\n            desiredSpeed[1] = -Math.sin(theta);\n        }\n\n        let godMode = false;\n        if (godMode) {\n            desiredSpeed[2] = (ds[4]&&!ds[5])?1:(ds[5]&&!ds[4])?-1:0;\n        } else {\n            if (ds[4]&&!ds[5]) {\n                for (let i = 0; i<3; ++i) {\n                    if (Newton.gravity[i] < 0 && entity.adherence[i]) {\n                        entity.acceleration[i] = 3.3/dt;\n                        entity.jump(i); // In which direction I jump\n                    }\n                }\n                for (let i = 3; i<6; ++i) {\n                    if (Newton.gravity[i-3] > 0 && entity.adherence[i]) {\n                        entity.acceleration[i-3] = -3.3/dt;\n                        entity.jump(i); // In which direction I jump\n                    }\n                }\n            }\n        }\n\n        desiredSpeed[0] *= 0.65;\n        desiredSpeed[1] *= 0.65;\n        desiredSpeed[2] *= 0.65;\n\n        Newton.add(speed, desiredSpeed);\n    }\n\n    static sumGlobalFields(force, pos, entity) {\n        // Gravity\n        let grav = Newton.gravity;\n        let m = entity.mass;\n        var sum = [grav[0]*m, grav[1]*m, grav[2]*m];\n\n        // sum[2] = 0; // ignore grav\n\n        Newton.add(force, sum);\n    }\n\n    static sumLocalFields(force, pos, EM) {\n        var sum = [0, 0, 0];\n        Newton.add(force, sum);\n    }\n\n}\n\nexport default Newton;\n"]}