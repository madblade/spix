{"version":3,"sources":["../../../../../../../server/app/engine/game3d/engine_physics/updater/updater.js"],"names":[],"mappings":";;;;AAIA;;;;;;;;;;;;;;;;IAEM;AAEF,aAFE,OAEF,CAAY,aAAZ,EAA2B;4CAFzB,SAEyB;;;AAEvB,aAAK,cAAL,GAAsB,aAAtB;;;AAFuB,YAKvB,CAAK,YAAL,GAAoB,cAAc,WAAd;;;AALG,YAQvB,CAAK,aAAL,GAAqB,cAAc,YAAd,CARE;KAA3B;;+BAFE;;+BAaK,aAAa;;;;AAGhB,wBAAY,OAAZ,CAAqB,UAAC,KAAD,EAAQ,MAAR;AACrB;;AAEI,sBAAM,OAAN,CAAc,aAAK;AACf,wBAAI,EAAE,MAAF,KAAa,MAAb,IAAuB,OAAO,EAAE,IAAF,KAAW,QAAlB,EACvB,MAAK,IAAL,CAAU,EAAE,IAAF,EAAQ,MAAlB,EADJ,KAGK,IAAI,EAAE,MAAF,KAAa,QAAb,IAAyB,EAAE,IAAF,YAAkB,KAAlB,EAC9B,MAAK,MAAL,CAAY,EAAE,IAAF,EAAQ,MAApB,EADC,KAGA,IAAI,EAAE,MAAF,KAAa,QAAb,IAAyB,OAAO,EAAE,IAAF,KAAW,QAAlB,EAC9B,MAAK,MAAL,CAAY,EAAE,IAAF,EAAQ,MAApB,EADC;iBAPK,CAAd,CAFJ;aADqB,CAArB,CAHgB;;;;6BAmBf,MAAM,QAAQ;AACf,gBAAI,WAAW,IAAX,CADW;AAEf,oBAAQ,IAAR;AACI,qBAAK,GAAL;AAAY,2BAAO,SAAP,GAAZ;AADJ,qBAES,GAAL;AAAY,2BAAO,OAAP,GAAZ;AAFJ,qBAGS,GAAL;AAAY,2BAAO,MAAP,GAAZ;AAHJ,qBAIS,GAAL;AAAY,2BAAO,WAAP,GAAZ;AAJJ,qBAKS,GAAL;AAAY,2BAAO,IAAP,GAAZ;AALJ,qBAMS,GAAL;AAAY,2BAAO,MAAP,GAAZ;;AANJ,qBAQS,IAAL;AAAY,2BAAO,WAAP,GAAZ;AARJ,qBASS,IAAL;AAAY,2BAAO,SAAP,GAAZ;AATJ,qBAUS,IAAL;AAAY,2BAAO,QAAP,GAAZ;AAVJ,qBAWS,IAAL;AAAY,2BAAO,aAAP,GAAZ;AAXJ,qBAYS,IAAL;AAAY,2BAAO,MAAP,GAAZ;AAZJ,qBAaS,IAAL;AAAY,2BAAO,QAAP,GAAZ;AAbJ,qBAcS,IAAL;AAAY,2BAAO,IAAP,GAAZ;;AAdJ;AAgBa,+BAAW,KAAX,CAAT;AAhBJ,aAFe;;;;+BAsBZ,MAAM,QAAQ;AACjB,gBAAI,OAAO,QAAP,KAAoB,IAApB,EAA0B,OAA9B;;AAEA,gBAAI,eAAe,KAAK,aAAL,CAHF;;AAKjB,gBAAI,IAAI,KAAK,CAAL,CAAJ,CALa;AAMjB,gBAAI,IAAI,KAAK,CAAL,CAAJ,CANa;;AAQjB,gBAAI,MAAM,OAAO,QAAP,CAAgB,CAAhB,CAAN,IAA4B,MAAM,OAAO,QAAP,CAAgB,CAAhB,CAAN,EAA0B;AACtD,uBAAO,MAAP,CAAc,CAAd,EAAiB,CAAjB,EADsD;AAEtD,6BAAa,aAAb,CAA2B,OAAO,EAAP,CAA3B,CAFsD;aAA1D;;;;+BAMG,MAAM,QAAQ;AACjB,gBAAI,SAAS,GAAT,EAAc;AACd,qBAAK,cAAL,CAAoB,cAApB,GADc;aAAlB;;;WArEF;;;kBA4ES","file":"updater.js","sourcesContent":["/**\n *\n */\n\n'use strict';\n\nclass Updater {\n\n    constructor(physicsEngine) {\n        // Engine.\n        this._physicsEngine = physicsEngine;\n\n        // Models.\n        this._entityModel = physicsEngine.entityModel;\n\n        // Output. (rotation causes entities to update)\n        this._outputBuffer = physicsEngine.outputBuffer;\n    }\n\n    update(inputBuffer) {\n\n        // Process incoming actions.\n        inputBuffer.forEach( (array, avatar) => // value, key\n        {\n            // TODO [LOW] compute means or filter some events.\n            array.forEach(e => {\n                if (e.action === 'move' && typeof e.meta === \"string\")\n                    this.move(e.meta, avatar);\n\n                else if (e.action === 'rotate' && e.meta instanceof Array)\n                    this.rotate(e.meta, avatar);\n\n                else if (e.action === 'action' && typeof e.meta === \"string\")\n                    this.action(e.meta, avatar);\n            });\n        });\n    }\n\n    move(meta, avatar) {\n        var hasMoved = true;\n        switch (meta) {\n            case 'f'  : avatar.goForward();     break;\n            case 'r'  : avatar.goRight();       break;\n            case 'l'  : avatar.goLeft();        break;\n            case 'b'  : avatar.goBackwards();   break;\n            case 'u'  : avatar.goUp();          break;\n            case 'd'  : avatar.goDown();        break;\n\n            case 'fx' : avatar.stopForward();   break;\n            case 'rx' : avatar.stopRight();     break;\n            case 'lx' : avatar.stopLeft();      break;\n            case 'bx' : avatar.stopBackwards(); break;\n            case 'ux' : avatar.stopUp();        break;\n            case 'dx' : avatar.stopDown();      break;\n            case 'xx' : avatar.stop();          break;\n\n            default: hasMoved = false;\n        }\n    };\n\n    rotate(meta, avatar) {\n        if (avatar.rotation === null) return;\n\n        let outputBuffer = this._outputBuffer;\n\n        let p = meta[0];\n        let y = meta[1];\n\n        if (p !== avatar.rotation[0] || y !== avatar.rotation[1]) {\n            avatar.rotate(p, y);\n            outputBuffer.entityUpdated(avatar.id);\n        }\n    }\n\n    action(meta, avatar) {\n        if (meta === \"g\") {\n            this._physicsEngine.shuffleGravity();\n        }\n    }\n\n}\n\nexport default Updater;\n"]}