{"version":3,"sources":["../../../../../../server/app/engine/game3d/model_world/chunk.js"],"names":[],"mappings":"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","file":"chunk.js","sourcesContent":["/**\n *\n */\n\n'use strict';\n\nimport BlockExtractor from './../engine_consistency/builder/surface_blocks_builder';\nimport FaceExtractor from './../engine_consistency/builder/surface_faces_builder';\n\nclass Chunk {\n\n    static debug = false;\n\n    constructor(xSize, ySize, zSize, chunkId, world) {\n        // App.\n        this._world = world;\n\n        // Dimensions, coordinates\n        this._xSize = xSize;\n        this._ySize = ySize;\n        this._zSize = zSize;\n\n        this._capacity = this._xSize * this._ySize * this._zSize;\n        this._chunkId = chunkId;\n        let ijk = chunkId.split(',');\n\n        this._chunkI = parseInt(ijk[0]);\n        this._chunkJ = parseInt(ijk[1]);\n        this._chunkK = parseInt(ijk[2]);\n\n        // Blocks.\n        /** Flatten array. x, then y, then z. */\n        this._blocks = new Uint8Array();\n        /** Nested z-array. (each z -> iÃ—j layer, without primary offset) */\n        this._surfaceBlocks = {}; // TODO [HIGH] refactor to map.\n        /** Each face -> index of its connected component. */\n        this._connectedComponents = new Uint8Array();\n        /**  Each connected component -> (sorted) list of face indices. */\n        this._fastConnectedComponents = {};\n        this._fastConnectedComponentsIds = {}; // Signed.\n        this._ready = false;\n\n        // Events.\n        this._lastUpdated = process.hrtime();\n        this._updates = [{}, {}, {}];\n    }\n\n    // Getters\n    get chunkI() { return this._chunkI; }\n    get chunkJ() { return this._chunkJ; }\n    get chunkK() { return this._chunkK; }\n    get chunkId() { return this._chunkId; }\n    get dimensions() { return [this._xSize, this._ySize, this._zSize]; }\n    get capacity() { return this._capacity; }\n    get blocks() { return this._blocks; }\n    get surfaceBlocks() { return this._surfaceBlocks; }\n    get fastComponents() { return this._fastConnectedComponents; }\n    get fastComponentsIds() { return this._fastConnectedComponentsIds; }\n    get connectedComponents() { return this._connectedComponents; }\n    get updates() { return this._updates; }\n    get ready() { return this._ready; }\n    get world() { return this._world; }\n\n    // Setters\n    set blocks(newBlocks) { this._blocks = newBlocks; }\n    set surfaceBlocks(newSurfaceBlocks) { this._surfaceBlocks = newSurfaceBlocks; }\n    set fastComponents(newFastComponents) { this._fastConnectedComponents = newFastComponents; }\n    set fastComponentsIds(newFastComponentsIds) { this._fastConnectedComponentsIds = newFastComponentsIds; }\n    set connectedComponents(newConnectedComponents) { this._connectedComponents = newConnectedComponents; }\n    set updates(newUpdates) { this._updates = newUpdates; }\n    set ready(newReady) { this._ready = newReady; }\n\n    _toId(x, y, z) {\n        var id = x + y * this._xSize + z * this._xSize * this._ySize;\n        if (id >= this._capacity) console.log(\"chunk._toId: invalid request coordinates.\");\n        return id;\n    }\n\n    what(x, y, z) {\n        var id = this._toId(x, y, z);\n        if ((id >= this._capacity) || (id < 0)) return 0;\n        return this._blocks[id];\n    }\n\n    contains(x, y, z) {\n        return this.what(x, y, z) !== 0;\n    }\n\n    getNeighbourChunkFromRelativeCoordinates(x, y, z) {\n        let neighbourChunkI, neighbourChunkJ, neighbourChunkK;\n        let xS = this._xSize, yS = this._ySize, zS = this._zSize;\n        let ci = this._chunkI, cj = this._chunkJ, ck = this._chunkK;\n        let world = this._world;\n\n        if (x < 0)          neighbourChunkI = ci - 1;\n        else if (x >= xS)   neighbourChunkI = ci + 1;\n        else                neighbourChunkI = ci;\n\n        if (y < 0)          neighbourChunkJ = cj - 1;\n        else if (y >= yS)   neighbourChunkJ = cj + 1;\n        else                neighbourChunkJ = cj;\n\n        if (z < 0)          neighbourChunkK = ck - 1;\n        else if (z >= zS)   neighbourChunkK = ck + 1;\n        else                neighbourChunkK = ck;\n\n        return world.getChunk(neighbourChunkI, neighbourChunkJ, neighbourChunkK);\n    }\n\n    // Mustn't exceed negative [xyz] Size\n    neighbourWhat(x, y, z) {\n        let localX, localY, localZ;\n        let xS = this._xSize, yS = this._ySize, zS = this._zSize;\n\n        if (x < 0)          localX = xS + x;\n        else if (x >= xS)   localX = x % xS;\n        else                localX = x;\n\n        if (y < 0)          localY = yS + y;\n        else if (y >= yS)   localY = y % yS;\n        else                localY = y;\n\n        if (z < 0)          localZ = zS + z;\n        else if (z >= zS)   localZ = z % zS;\n        else                localZ = z;\n\n        const nChunk = this.getNeighbourChunkFromRelativeCoordinates(x, y, z);\n        return nChunk.what(localX, localY, localZ);\n    }\n\n    neighbourContains(x, y, z) {\n        return this.neighbourWhat(x, y, z) !== 0;\n    }\n\n    add(x, y, z, blockId) {\n        var id = this._toId(x, y, z);\n        if (id >= this._capacity) return;\n\n        // Update blocks, surface blocks, then surface faces.\n        this._blocks[id] = blockId;\n        return id;\n    }\n\n    del(x, y, z) {\n        var id = this._toId(x, y, z);\n        if (id >= this._capacity) return;\n\n        // Update blocks, surface blocks, then surface faces.\n        this._blocks[id] = 0;\n        return id;\n    }\n\n    flushUpdates() {\n        this._updates = [{}, {}, {}];\n    }\n}\n\nexport default Chunk;\n"]}