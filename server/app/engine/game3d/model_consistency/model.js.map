{"version":3,"sources":["../../../../../../server/app/engine/game3d/model_consistency/model.js"],"names":[],"mappings":"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","file":"model.js","sourcesContent":["/**\n *\n */\n\n'use strict';\n\nimport GeometryUtils    from '../../math/geometry';\n\nclass ConsistencyModel {\n\n    constructor(game) {\n        // Model.\n        this._worldModel                = game.worldModel;\n        this._entityModel               = game.entityModel;\n        this._xModel                    = game.xModel;\n\n        // Internals.\n        this._entityIdsForEntity        = new Map();\n        this._chunkIdsForEntity         = new Map();\n        this._chunkIdAndPartsForEntity  = new Map();\n\n        this._xIdsForEntity             = new Map();\n        this._partialXs                 = new Map();\n    }\n\n    spawnPlayer(player) {\n        let playerId = player.avatar.id;\n        let chunksMap = new Map();\n        chunksMap.set(player.avatar.worldId, new Set());\n\n        this._entityIdsForEntity        .set(playerId, new Set());\n        this._chunkIdsForEntity         .set(playerId, chunksMap);\n        this._chunkIdAndPartsForEntity  .set(playerId, new Map()); // TODO [LOW] think\n\n        this._xIdsForEntity             .set(playerId, new Set());\n        this._partialXs                 .set(playerId, new Set());\n    }\n\n    removePlayer(playerId) {\n        this._entityIdsForEntity        .delete(playerId);\n        this._chunkIdsForEntity         .delete(playerId);\n        this._chunkIdAndPartsForEntity  .delete(playerId);\n\n        this._xIdsForEntity             .delete(playerId);\n        this._partialXs                 .delete(playerId);\n    }\n\n    /** Entity to chunks **/\n\n    chunkIdsPerWorldForEntity(playerId) {\n        playerId = parseInt(playerId);\n\n        return this._chunkIdsForEntity.get(playerId);\n    }\n\n    hasChunk(playerId, worldId, chunkId) {\n        playerId = parseInt(playerId);\n        worldId = parseInt(worldId);\n\n        let chunkIdsForEntityInWorld = this._chunkIdsForEntity.get(playerId).get(worldId);\n        return (chunkIdsForEntityInWorld && chunkIdsForEntityInWorld.has(chunkId));\n    }\n\n    setChunkLoaded(playerId, worldId, chunkId) {\n        // Just in case.\n        playerId = parseInt(playerId);\n        worldId = parseInt(worldId);\n\n        let chunksForPlayer = this._chunkIdsForEntity.get(playerId);\n        if (chunksForPlayer.has(worldId)) {\n            chunksForPlayer.get(worldId).add(chunkId);\n        } else {\n            let s = new Set();\n            s.add(chunkId);\n            chunksForPlayer.set(worldId, s);\n        }\n    }\n\n    setChunkOutOfRange(playerId, worldId, chunkId) {\n        playerId = parseInt(playerId);\n        worldId = parseInt(worldId);\n\n        let chunksForPlayerInWorld = this._chunkIdsForEntity.get(playerId).get(worldId);\n        chunksForPlayerInWorld.delete(chunkId);\n    }\n\n    doneChunkLoadingPhase(player, starterChunk) {\n        let avatar = player.avatar;\n        let renderDistance = avatar.chunkRenderDistance;\n        let worldId = avatar.worldId;\n\n        let side = renderDistance*2 + 1;\n\n        // TODO [CRIT] worldify (with xModel.getConnectivity)\n        let worlds = this._chunkIdsForEntity.get(avatar.id);\n\n        let chunks = this._chunkIdsForEntity.get(avatar.id).get(worldId);\n        if (!chunks) return false;\n\n        let actualInnerSize = 0;\n        let distance = GeometryUtils.infiniteNormDistance;\n\n        let sijk = starterChunk.chunkId.split(',');\n        chunks.forEach(chunkId => {\n            let ijk = chunkId.split(',');\n            if (distance(sijk, ijk) <= renderDistance) {\n                actualInnerSize++;\n            }\n        });\n\n        // TODO [HIGH] differentiate 3D / 2D.\n        const expectedSize = side*side*side;\n\n        return expectedSize <= actualInnerSize;\n    }\n\n    /** Entity to entities **/\n\n    // TODO [CRIT] worldify entities\n    hasEntity(playerId, entityId) {\n        return this._entityIdsForEntity.get(playerId).has(entityId);\n    }\n\n    setEntityLoaded(playerId, entityId) {\n        this._entityIdsForEntity.get(playerId).add(entityId);\n    }\n\n    setEntityOutOfRange(playerId, entityId) {\n        this._entityIdsForEntity.get(playerId).delete(entityId);\n    }\n\n    /** Entity to xs **/\n\n    getXIdsForEntity(entityId) {\n        return this._xIdsForEntity.get(entityId);\n    }\n\n    // Note: it would not have been wise to consider an x as an 'entity'.\n    // ENHANCEMENT [LONG-TERM]: can an x move over time?\n    hasX(playerId, xId) {\n        xId = parseInt(xId);\n        return this._xIdsForEntity.get(playerId).has(xId);\n    }\n\n    setXLoaded(playerId, xId) {\n        xId = parseInt(xId);\n        this._xIdsForEntity.get(playerId).add(xId);\n    }\n\n    setXOutOfRange(playerId, xId) {\n        xId = parseInt(xId);\n        this._xIdsForEntity.get(playerId).delete(xId);\n    }\n\n    setPartialX(playerId, xId) {\n        xId = parseInt(xId);\n        this._partialXs.get(playerId).add(xId);\n    }\n\n    unsetPartialX(playerId, xId) {\n        xId = parseInt(xId);\n        this._partialXs.get(playerId).delete(xId);\n    }\n\n    isPartialX(playerId, xId) {\n        xId = parseInt(xId);\n        let p = this._partialXs.get(playerId);\n        if (!p) return false;\n        return p.has(xId);\n    }\n\n}\n\nexport default ConsistencyModel;\n"]}